{{- with .Values.serviceApi }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-api
  namespace: {{ $.Release.Namespace | quote }}
spec:
  selector:
    matchLabels:
      app: service-api
  replicas: {{ .replicaCount }}
  template:
    metadata:
      labels:
        app: service-api
      annotations:
        checksum/cognigy-env: {{ include (print $.Template.BasePath "/configurations/cognigy-env.yaml") $ | sha256sum }}
        checksum/rabbitmq: {{ if not (lookup "v1" "Secret" $.Release.Namespace "cognigy-rabbitmq") }}{{ include (print $.Template.BasePath "/common-secrets/cognigy-rabbitmq.yaml") $ | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace "cognigy-rabbitmq").data | sha256sum }}{{ end }}
        checksum/redis: {{ if not (lookup "v1" "Secret" $.Release.Namespace "cognigy-redis-password") }}{{ include (print $.Template.BasePath "/common-secrets/cognigy-redis-password.yaml") $ | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace "cognigy-redis-password").data | sha256sum }}{{ end }}
        checksum/redis-persistent: {{ if not (lookup "v1" "Secret" $.Release.Namespace "cognigy-redis-persistent-password") }}{{ include (print $.Template.BasePath "/common-secrets/cognigy-redis-persistent-password.yaml") $ | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace "cognigy-redis-persistent-password").data | sha256sum }}{{ end }}
        checksum/management-ui: {{ if not (lookup "v1" "Secret" $.Release.Namespace (printf "%s" (include "managementUiCredentials.secretName.render" $ ))) }}{{ include (print $.Template.BasePath "/common-secrets/cognigy-management-ui-creds.yaml") $ | sha256sum }}{{ else }}{{ range $key, $value := (lookup "v1" "Secret" $.Release.Namespace (printf "%s" (include "managementUiCredentials.secretName.render" $ ))).data }}{{ $value | sha256sum }}{{ end }}{{ end }}
        checksum/secret: {{ if not (lookup "v1" "Secret" $.Release.Namespace "cognigy-service-api") }}{{ include (print $.Template.BasePath "/service-api/secret.yaml") $ | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace "cognigy-service-api").data | sha256sum }}{{ end }}

    spec:
      {{- if .affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: service-api
          image: {{ .image }}
          resources: {{- toYaml .resources | nindent 12 }}
          ports:
            - name: health
              containerPort: 8001
            - name: metrics
              containerPort: 8002
          envFrom:
            - configMapRef:
                name: cognigy-env
          env:
            - name: REDIS_ENABLE_RECONNECT
              value: "true"
            - name: RABBITMQ_ENABLE_RECONNECT
              value: "true"
            - name: FEATURE_USE_NEW_PAGINATION_PLUGIN
              value: 'true'
            - name: INSIGHTS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: cognigy-insights-jwt
                  key: secret
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: cognigy-jwt
                  key: secret
            - name: AMAZON_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{- include "amazonCredentials.secretName.render" $ | indent 1 }}
                  key: amazon-client-id
            - name: AMAZON_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{- include "amazonCredentials.secretName.render" $ | indent 1 }}
                  key: amazon-client-secret
            - name: SYSTEM_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{- include "smtp.password.secretName" $ | indent 1 }}
                  key: system-smtp-password
            {{- if .extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: rabbitmq-connection-string
              mountPath: /var/run/secrets/rabbitmqConnectionString
              subPath: rabbitmqConnectionString
            - name: mongodb-connection-string
              mountPath: /var/run/secrets/mongodbConnectionString
              subPath: mongodbConnectionString
            - name: redis-password
              mountPath: /var/run/secrets/redis-password.conf
              subPath: redis-password.conf
            - name: redis-persistent-password
              mountPath: /var/run/secrets/redis-persistent-password.conf
              subPath: redis-persistent-password.conf
            - name: management-ui-creds
              mountPath: /var/run/secrets/management-ui-creds.json
              subPath: management-ui-creds.json
            {{- if .extraVolumeMounts }}
            {{- include "common.tplvalues.render" ( dict "value" .extraVolumeMounts "context" $ ) | nindent 12 }}
            {{- end }}
          startupProbe:
            httpGet:
              path: /health/startup
              port: 8001
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8001
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 10
      volumes:
        - name: rabbitmq-connection-string
          secret:
            secretName: cognigy-rabbitmq
            items:
              - key: connection-string
                path: rabbitmqConnectionString
        - name: mongodb-connection-string
          secret:
            secretName: cognigy-service-api
            items:
              - key: connection-string
                path: mongodbConnectionString
        - name: redis-password
          secret:
            secretName: cognigy-redis-password
        - name: redis-persistent-password
          secret:
            secretName: cognigy-redis-persistent-password
        - name: management-ui-creds
          secret:
            secretName: {{- include "managementUiCredentials.secretName.render" $ | indent 1 }}
        {{- if .extraVolumes }}
        {{- include "common.tplvalues.render" ( dict "value" .extraVolumes "context" $ ) | nindent 8 }}
        {{- end }}
      {{- include "image.pullSecrets" $ | nindent 6 }}
      securityContext:
        {{- toYaml .securityContext | nindent 8 }}
{{- end }}