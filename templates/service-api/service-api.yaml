{{- $cognigyTestingJwt_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyTestingJwt.existingSecret "defaultSecret" "cognigy-testing-jwt") }}
{{- $cognigyAuthJwt_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyAuthJwt.existingSecret "defaultSecret" "cognigy-auth-jwt") }}
{{- $cognigyCollaborationJwt_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyCollaborationJwt.existingSecret "defaultSecret" "cognigy-collaboration-jwt") }}
{{- $cognigyInsightsJwt_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyInsightsJwt.existingSecret "defaultSecret" "cognigy-insights-jwt") }}
{{- $cognigyJwt_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyJwt.existingSecret "defaultSecret" "cognigy-jwt") }}
{{- $statefulRabbitMq_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.statefulRabbitMq.auth.existingSecret "defaultSecret" "cognigy-rabbitmq") }}
{{- $redisHa_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.redisHa.auth.existingSecret "defaultSecret" "cognigy-redis-password") }}
{{- $redisPersistentHa_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.redisPersistentHa.auth.existingSecret "defaultSecret" "cognigy-redis-persistent-password") }}
{{- $serviceApi_dbSecret := include "common.secretName.render" ( dict "existingSecret" $.Values.dbConnectionString.services.serviceApi.auth.existingSecret "defaultSecret" (printf "cognigy-%s" $.Values.dbConnectionString.services.serviceApi.serviceName)) }}
{{- $cognigySmtpOauth2Credentials_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.smtpOAuth2.auth.existingSecret "defaultSecret" "cognigy-smtp-oauth2-credentials") }}
{{- $cognigySearchOrchestratorApiKey := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigySearchOrchestratorApiKey.existingSecret "defaultSecret" "cognigy-search-orchestrator-api-key") }}
{{- $cognigyOauthClient_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyOauthClientSecret.existingSecret "defaultSecret" "cognigy-oauth-client-secret") }}
{{- $cognigyVoicegatewayClient_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyVoicegatewayClientSecret.existingSecret "defaultSecret" "cognigy-voicegateway-client-secret") }}
{{- $vgWebappDefaultLoginCredentials_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.vgWebappDefaultLoginCredentials.existingSecret "defaultSecret" "cognigy-vg-webapp-default-login-creds") }}
{{- $cognigyAutoDialerClient_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyADClientSecret.existingSecret "defaultSecret" "cognigy-auto-dialer-client-secret") }}
{{- with .Values.serviceApi }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-api
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    owner-team: boron
spec:
  selector:
    matchLabels:
      app: service-api
  replicas: {{ .replicaCount }}
  template:
    metadata:
      labels:
        app: service-api
      annotations:
        checksum/cognigy-env: {{ include (print $.Template.BasePath "/configurations/cognigy-env.yaml") $ | sha256sum }}
        checksum/rabbitmq: {{ if not (lookup "v1" "Secret" $.Release.Namespace $statefulRabbitMq_secret) }}{{ $statefulRabbitMq_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $statefulRabbitMq_secret).data | sha256sum }}{{ end }}
        checksum/redis: {{ if not (lookup "v1" "Secret" $.Release.Namespace $redisHa_secret) }}{{ $redisHa_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $redisHa_secret).data | sha256sum }}{{ end }}
        checksum/redis-persistent: {{ if not (lookup "v1" "Secret" $.Release.Namespace $redisPersistentHa_secret) }}{{ $redisPersistentHa_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $redisPersistentHa_secret).data | sha256sum }}{{ end }}
        checksum/management-ui: {{ if not (lookup "v1" "Secret" $.Release.Namespace (printf "%s" (include "managementUiCredentials.secretName.render" $ ))) }}{{ include (print $.Template.BasePath "/common-secrets/cognigy-management-ui-creds.yaml") $ | sha256sum }}{{ else }}{{ range $key, $value := (lookup "v1" "Secret" $.Release.Namespace (printf "%s" (include "managementUiCredentials.secretName.render" $ ))).data }}{{ $value | sha256sum }}{{ end }}{{ end }}
        checksum/secret: {{ if not (lookup "v1" "Secret" $.Release.Namespace $serviceApi_dbSecret) }}{{ $serviceApi_dbSecret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $serviceApi_dbSecret).data | sha256sum }}{{ end }}
        checksum/cognigy-smtp-oauth2-credentials: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigySmtpOauth2Credentials_secret) }}{{ $cognigySmtpOauth2Credentials_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigySmtpOauth2Credentials_secret).data | sha256sum }}{{ end }}
        {{- if $.Values.knowledgeSearch.enabled }}
        checksum/cognigy-search-orchestrator-api-key: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigySearchOrchestratorApiKey) }}{{ $cognigySearchOrchestratorApiKey | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigySearchOrchestratorApiKey).data | sha256sum }}{{ end }}
        {{- end }}
        checksum/cognigy-jwt: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigyJwt_secret) }}{{ $cognigyJwt_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigyJwt_secret).data | sha256sum }}{{ end }}
        checksum/cognigy-testing-jwt: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigyTestingJwt_secret) }}{{ $cognigyTestingJwt_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigyTestingJwt_secret).data | sha256sum }}{{ end }}
        checksum/cognigy-collaboration-jwt: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigyCollaborationJwt_secret) }}{{ $cognigyCollaborationJwt_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigyCollaborationJwt_secret).data | sha256sum }}{{ end }}
        checksum/cognigy-auth-jwt: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigyAuthJwt_secret) }}{{ $cognigyAuthJwt_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigyAuthJwt_secret).data | sha256sum }}{{ end }}
        checksum/cognigy-oauth-client-secret: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigyOauthClient_secret) }}{{ $cognigyOauthClient_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigyOauthClient_secret).data | sha256sum }}{{ end }}
        checksum/cognigy-voicegateway-client-secret: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigyVoicegatewayClient_secret) }}{{ $cognigyVoicegatewayClient_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigyVoicegatewayClient_secret).data | sha256sum }}{{ end }}
        checksum/cognigy-vg-webapp-default-login-creds: {{ if not (lookup "v1" "Secret" $.Release.Namespace $vgWebappDefaultLoginCredentials_secret) }}{{ $vgWebappDefaultLoginCredentials_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $vgWebappDefaultLoginCredentials_secret).data | sha256sum }}{{ end }}
        {{- if $.Values.cognigyAD.enabled }}
        checksum/cognigy-auto-dialer-client-secret: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigyAutoDialerClient_secret) }}{{ $cognigyAutoDialerClient_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigyAutoDialerClient_secret).data | sha256sum }}{{ end }}
        {{- end }}
        {{- if $.Values.cognigyCommonPodAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" $.Values.cognigyCommonPodAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .serviceAccountName }}
      serviceAccountName: {{ .serviceAccountName }}
      {{- end }}
      {{- if .affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .priorityClassName }}
      priorityClassName: {{ .priorityClassName }}
      {{- end }}
      containers:
        - name: service-api
          image: {{ include "common.image.render" (dict "global" $.Values.global "image" .image) }}
          resources: {{- toYaml .resources | nindent 12 }}
          ports:
            - name: health
              containerPort: 8001
            - name: metrics
              containerPort: 8002
          envFrom:
            - configMapRef:
                name: cognigy-env
          env:
            - name: REDIS_ENABLE_RECONNECT
              value: "true"
            - name: RABBITMQ_ENABLE_RECONNECT
              value: "true"
            - name: FEATURE_USE_NEW_PAGINATION_PLUGIN
              value: 'true'
            - name: HOST_VALIDATION_WHITELIST
              value: {{ $.Values.ingress.serviceApi.host  | quote }}
            - name: AUTH_JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyAuthJwt_secret }}
                  key: secret
            - name: COLLABORATION_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyCollaborationJwt_secret }}
                  key: secret
            - name: TESTING_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyTestingJwt_secret }}
                  key: secret
            - name: INSIGHTS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyInsightsJwt_secret }}
                  key: secret
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyJwt_secret }}
                  key: secret
            - name: AMAZON_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{- include "amazonCredentials.secretName.render" $ | indent 1 }}
                  key: amazon-client-id
            - name: AMAZON_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{- include "amazonCredentials.secretName.render" $ | indent 1 }}
                  key: amazon-client-secret
            - name: SYSTEM_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{- include "smtp.password.secretName" $ | indent 1 }}
                  key: system-smtp-password
            - name: SYSTEM_SMTP_EMAIL_OAUTH2_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigySmtpOauth2Credentials_secret }}
                  key: smtp-oauth2-client-id
            - name: SYSTEM_SMTP_EMAIL_OAUTH2_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigySmtpOauth2Credentials_secret }}
                  key: smtp-oauth2-client-secret
            - name: SYSTEM_SMTP_EMAIL_OAUTH2_REFRESH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigySmtpOauth2Credentials_secret }}
                  key: smtp-oauth2-refresh-token
            - name: SYSTEM_SMTP_EMAIL_OAUTH2_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigySmtpOauth2Credentials_secret }}
                  key: smtp-oauth2-access-token
            - name: OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyOauthClient_secret }}
                  key: secret
            - name: CLIENT_SECRET_COGNIGY_VOICE_GATEWAY
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyVoicegatewayClient_secret }}
                  key: secret
            - name: COGNIGY_VOICE_GATEWAY_WEB_APP_DEFAULT_USER_CREDENTIAL
              valueFrom:
                secretKeyRef:
                  name: {{ $vgWebappDefaultLoginCredentials_secret }}
                  key: vg-webapp-login-creds
            {{- if $.Values.cognigyAD.enabled }}
            - name: CLIENT_SECRET_COGNIGY_AUTO_DIALER
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyAutoDialerClient_secret }}
                  key: secret
            {{- end }}
            - name: TRACING_ENABLED
              value: {{ $.Values.tracing.sentry.ide.enabled | quote }}
            - name: TRACING_BASE_URL_WITH_PROTOCOL
              value: {{ $.Values.tracing.sentry.ide.baseUrl | quote }}      
            - name: TRACING_ERRORS_ENABLED
              value: {{ $.Values.tracing.sentry.ide.errorsEnabled | quote }}
            - name: TRACING_EVENTS_SAMPLE_RATE
              value: {{ $.Values.tracing.sentry.ide.eventsSampleRate | quote }}
            - name: TRACING_SAMPLE_RATE
              value: {{ $.Values.tracing.sentry.ide.sampleRate | quote }}
            - name: ENVIRONMENT
              value: {{ $.Values.tracing.environment | quote }}
            - name: COGNIGY_AI_RELEASE_VERSION
              value: {{ $.Chart.AppVersion | quote }}
            - name: FEATURE_USE_NEW_NFS
              value: {{ $.Values.migrateFS.enabled | quote }}
            - name: FEATURE_DEPRECATE_OLD_NFS
              value: {{ $.Values.migrateFS.finished | quote }}
            {{- if $.Values.knowledgeSearch.enabled }}
            - name: SEARCH_ORCHESTRATOR_API_KEY
              valueFrom:
                secretKeyRef:
                    name: {{ $cognigySearchOrchestratorApiKey }}
                    key: api-key
            {{- end }}
            {{- if .extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: rabbitmq-connection-string
              mountPath: /var/run/secrets/rabbitmqConnectionString
              subPath: rabbitmqConnectionString
            - name: mongodb-connection-string
              mountPath: /var/run/secrets/mongodbConnectionString
              subPath: mongodbConnectionString
            - name: redis-password
              mountPath: /var/run/secrets/redis-password.conf
              subPath: redis-password.conf
            - name: redis-persistent-password
              mountPath: /var/run/secrets/redis-persistent-password.conf
              subPath: redis-persistent-password.conf
            - name: management-ui-creds
              mountPath: /var/run/secrets/management-ui-creds.json
              subPath: management-ui-creds.json
            {{- if not $.Values.migrateFS.finished }}
            - name: functions
              mountPath: /app/oldFunctions
            {{- end }}
            {{- if $.Values.migrateFS.enabled }}
            - name: ide
              mountPath: /app/packages
              subPath: packages
            - name: ide
              mountPath: /app/snapshots
              subPath: snapshots
            - name: ide
              mountPath: /app/resumableUploads
              subPath: resumableUploads
            {{- end }}
            {{- if .extraVolumeMounts }}
            {{- include "common.tplvalues.render" ( dict "value" .extraVolumeMounts "context" $ ) | nindent 12 }}
            {{- end }}
          startupProbe:
            httpGet:
              path: /health/startup
              port: 8001
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8001
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 10
      volumes:
        - name: rabbitmq-connection-string
          secret:
            secretName: {{ $statefulRabbitMq_secret }}
            items:
              - key: connection-string
                path: rabbitmqConnectionString
        - name: mongodb-connection-string
          secret:
            secretName: {{ $serviceApi_dbSecret }}
            items:
              - key: connection-string
                path: mongodbConnectionString
        - name: redis-password
          secret:
            secretName: {{ $redisHa_secret }}
        - name: redis-persistent-password
          secret:
            secretName: {{ $redisPersistentHa_secret }}
        - name: management-ui-creds
          secret:
            secretName: {{- include "managementUiCredentials.secretName.render" $ | indent 1 }}
        - name: vg-webapp-login-creds
          secret:
            secretName: {{ $vgWebappDefaultLoginCredentials_secret }}
        {{- if not $.Values.migrateFS.finished }}
        - name: functions
          persistentVolumeClaim:
            claimName: functions
        {{- end }}
        {{- if $.Values.migrateFS.enabled }}
        - name: ide
          persistentVolumeClaim:
            claimName: ide
        {{- end }}
        {{- if .extraVolumes }}
        {{- include "common.tplvalues.render" ( dict "value" .extraVolumes "context" $ ) | nindent 8 }}
        {{- end }}
      {{- include "image.pullSecretsCognigy" $ | nindent 6 }}
      securityContext:
        {{- toYaml .securityContext | nindent 8 }}
{{- end }}