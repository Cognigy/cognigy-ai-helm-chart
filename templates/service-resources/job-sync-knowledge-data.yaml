{{- if and (.Values.jobSyncKnowledgeData.enabled) (.Values.knowledgeSearch.enabled) }}
{{- $serviceResources_dbSecret := include "common.secretName.render" ( dict "existingSecret" $.Values.dbConnectionString.services.serviceResources.auth.existingSecret "defaultSecret" (printf "cognigy-%s" $.Values.dbConnectionString.services.serviceResources.serviceName)) }}
{{- $statefulRabbitMq_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.statefulRabbitMq.auth.existingSecret "defaultSecret" "cognigy-rabbitmq") }}
{{- $redisHa_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.redisHa.auth.existingSecret "defaultSecret" "cognigy-redis-password") }}
{{- with .Values.jobSyncKnowledgeData }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: job-sync-knowledge-data
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    owner-team: carbon
spec:
  schedule: {{ .schedule | quote }}
  concurrencyPolicy: {{ .concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ .successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      backoffLimit: {{ .backoffLimit }}
      parallelism: {{ .parallelism }}
      activeDeadlineSeconds: {{ .jobActiveDeadlineSeconds }}
      ttlSecondsAfterFinished: {{ .jobTtlSecondsAfterFinished }}
      template:
        spec:
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
          restartPolicy: {{ .restartPolicy }}
          {{- if .affinity }}
          affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 12 }}
          {{- end }}
          {{- if .nodeSelector }}
          nodeSelector: {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 12 }}
          {{- end }}
          {{- if .tolerations }}
          tolerations: {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 12 }}
          {{- end }}
          {{- if .priorityClassName }}
          priorityClassName: {{ .priorityClassName }}
          {{- end }}
          containers:
            - name: job-sync-knowledge-data
              image: {{ include "common.image.render" (dict "global" $.Values.global "image" .image) }}
              resources: {{- toYaml .resources | nindent 16 }}
              env:
                - name: REDIS_ENABLE_RECONNECT
                  value: "true"
                - name: RABBITMQ_ENABLE_RECONNECT
                  value: "true"
                - name: TRACING_ENABLED
                  value: {{ $.Values.tracing.sentry.ide.enabled | quote }}
                - name: TRACING_BASE_URL_WITH_PROTOCOL
                  value: {{ $.Values.tracing.sentry.ide.baseUrl | quote }}      
                - name: TRACING_ERRORS_ENABLED
                  value: {{ $.Values.tracing.sentry.ide.errorsEnabled | quote }}
                - name: TRACING_EVENTS_SAMPLE_RATE
                  value: {{ $.Values.tracing.sentry.ide.eventsSampleRate | quote }}
                - name: TRACING_SAMPLE_RATE
                  value: {{ $.Values.tracing.sentry.ide.sampleRate | quote }}
                - name: ENVIRONMENT
                  value: {{ $.Values.tracing.environment | quote }}
                - name: COGNIGY_AI_RELEASE_VERSION
                  value: {{ $.Chart.AppVersion | quote }}
                {{- if .extraEnvVars }}
                {{- include "common.tplvalues.render" (dict "value" .extraEnvVars "context" $) | nindent 16 }}
                {{- end }}
              envFrom:
                - configMapRef:
                    name: cognigy-env
              volumeMounts:
                - name: mongodb-connection-string
                  mountPath: /var/run/secrets/mongodbConnectionString
                  subPath: mongodbConnectionString
                - name: rabbitmq-connection-string
                  mountPath: /var/run/secrets/rabbitmqConnectionString
                  subPath: rabbitmqConnectionString
                - name: redis-password
                  mountPath: /var/run/secrets/redis-password.conf
                  subPath: redis-password.conf
                {{- if $.Values.qdrant.enabled }}
                - name: qdrant-api-key
                  mountPath: /var/run/secrets/qdrant-api-key
                  subPath: qdrant-api-key
                - name: vector-db-config
                  mountPath: /vector-db-config/qdrant/collection/config.json
                  subPath: qdrant-collection-config
                {{- end }}
                {{- if .extraVolumeMounts }}
                {{- include "common.tplvalues.render" ( dict "value" .extraVolumeMounts "context" $ ) | nindent 16 }}
                {{- end }}
          volumes:
            - name: mongodb-connection-string
              secret:
                secretName: {{ $serviceResources_dbSecret }}
                items:
                  - key: connection-string
                    path: mongodbConnectionString
            - name: rabbitmq-connection-string
              secret:
                secretName: {{ $statefulRabbitMq_secret }}
                items:
                  - key: connection-string
                    path: rabbitmqConnectionString
            - name: redis-password
              secret:
                secretName: {{ $redisHa_secret }}
            {{- if $.Values.qdrant.enabled }}
            - name: qdrant-api-key
              secret:
                secretName: qdrant-apikey
                items:
                  - key: api-key
                    path: qdrant-api-key
            - name: vector-db-config
              configMap:
                name: vector-db-config
            {{- end }}
            {{- if .extraVolumes }}
            {{- include "common.tplvalues.render" ( dict "value" .extraVolumes "context" $ ) | nindent 12 }}
            {{- end }}
          {{- include "image.pullSecretsCognigy" $ | nindent 10 }}  
{{- end }}
{{- end }}
