{{- if .Values.knowledgeSearch.enabled }}
{{- with .Values.serviceSearchOrchestrator }}
{{- $statefulRabbitMq_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.statefulRabbitMq.auth.existingSecret "defaultSecret" "cognigy-rabbitmq") }}
{{- $redisHa_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.redisHa.auth.existingSecret "defaultSecret" "cognigy-redis-password") }}
{{- $cognigySearchOrchestratorApiKey := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigySearchOrchestratorApiKey.existingSecret "defaultSecret" "cognigy-search-orchestrator-api-key") }}
{{- $cognigyQdrantApiKey := "qdrant-apikey" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-search-orchestrator
  namespace: {{ $.Release.Namespace | quote }}
spec:
  selector:
    matchLabels:
      app: service-search-orchestrator
  replicas: {{ .replicaCount }}
  template:
    metadata:
      labels:
        app: service-search-orchestrator
      annotations:
        checksum/cognigy-env: {{ include (print $.Template.BasePath "/configurations/cognigy-env.yaml") $ | sha256sum }}
        {{- if $.Values.qdrant.enabled }}
        checksum/vector-db-config: {{ include (print $.Template.BasePath "/service-search-orchestrator/vector-db-config.yaml") $ | sha256sum }}
        checksum/qdrant-api-key: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigyQdrantApiKey) }}{{ $cognigyQdrantApiKey | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigyQdrantApiKey).data | sha256sum }}{{ end }}
        {{- end }}
        checksum/cognigy-search-orchestrator-api-key: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigySearchOrchestratorApiKey) }}{{ $cognigySearchOrchestratorApiKey | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigySearchOrchestratorApiKey).data | sha256sum }}{{ end }}
        checksum/rabbitmq: {{ if not (lookup "v1" "Secret" $.Release.Namespace $statefulRabbitMq_secret) }}{{ $statefulRabbitMq_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $statefulRabbitMq_secret).data | sha256sum }}{{ end }}
        checksum/redis: {{ if not (lookup "v1" "Secret" $.Release.Namespace $redisHa_secret) }}{{ $redisHa_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $redisHa_secret).data | sha256sum }}{{ end }}
        {{- if $.Values.cognigyCommonPodAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" $.Values.cognigyCommonPodAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .priorityClassName }}
      priorityClassName: {{ .priorityClassName }}
      {{- end }}
      containers:
        - name: service-search-orchestrator
          image: {{ include "common.image.render" (dict "global" $.Values.global "image" .image) }}
          resources: {{- toYaml .resources | nindent 12 }}
          ports:
            - name: http
              containerPort: 8000
            - name: metrics
              containerPort: 8001
          startupProbe:
            httpGet:
              path: /health/startup
              port: 8000
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8000
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 10
          volumeMounts:
            - name: redis-password
              mountPath: /var/run/secrets/redis-password.conf
              subPath: redis-password.conf
            - name: rabbitmq-connection-string
              mountPath: /var/run/secrets/rabbitmqConnectionString
              subPath: rabbitmqConnectionString
            {{- if $.Values.qdrant.enabled }}
            - name: qdrant-api-key
              mountPath: /var/run/secrets/qdrant-api-key
              subPath: qdrant-api-key
            - name: vector-db-config
              mountPath: /vector-db-config/qdrant/collection/config.json
              subPath: qdrant-collection-config
            {{- end }}
          envFrom:
            - configMapRef:
                name: cognigy-env
          env:
            - name: COGNIGY_AI_RELEASE_VERSION
              value: {{ $.Chart.AppVersion | quote }}
            - name: SEARCH_ORCHESTRATOR_API_KEY
              valueFrom:
                secretKeyRef:
                    name: {{ $cognigySearchOrchestratorApiKey }}
                    key: api-key
            {{- if .extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
      volumes:
        - name: redis-password
          secret:
            secretName: {{ $redisHa_secret }}
        - name: rabbitmq-connection-string
          secret:
            secretName: {{ $statefulRabbitMq_secret }}
            items:
              - key: connection-string
                path: rabbitmqConnectionString
        {{- if $.Values.qdrant.enabled }}
        - name: qdrant-api-key
          secret:
            secretName: {{ $cognigyQdrantApiKey }}
            items:
              - key: api-key
                path: qdrant-api-key
        - name: vector-db-config
          configMap:
            name: vector-db-config
        {{- end }}
      {{- include "image.pullSecretsCognigy" $ | nindent 6 }}
      securityContext:
        {{- toYaml .securityContext | nindent 8 }}
{{- end }}
{{- end }}