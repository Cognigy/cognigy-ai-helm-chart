{{- $statefulRabbitMq_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.statefulRabbitMq.auth.existingSecret "defaultSecret" "cognigy-rabbitmq") }}
{{- with .Values.serviceExecution }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-execution
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    owner-team: aluminium
spec:
  selector:
    matchLabels:
      app: service-execution
  {{- if not (and ($.Values.hpa.enabled) ($.Values.hpa.removeReplicas) ($.Values.hpa.services.serviceExecution.enabled)) }}
  replicas: {{ .replicaCount }}
  {{- end }}
  template:
    metadata:
      labels:
        app: service-execution
      annotations:
        checksum/rabbitmq: {{ if not (lookup "v1" "Secret" $.Release.Namespace $statefulRabbitMq_secret) }}{{ $statefulRabbitMq_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $statefulRabbitMq_secret).data | sha256sum }}{{ end }}
        {{- if $.Values.cognigyCommonPodAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" $.Values.cognigyCommonPodAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if or (.nodeSelector) (and ($.Values.hpa.enabled) ($.Values.hpa.useHpaNodeSelector))}}
      nodeSelector:
        {{- if .nodeSelector }}
          {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 8 }}
        {{- end }}
        {{- if and ($.Values.hpa.enabled) ($.Values.hpa.useHpaNodeSelector) }}
          {{- include "common.tplvalues.render" (dict "value" $.Values.hpa.hpaNodeSelector "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if or (.tolerations) (and ($.Values.hpa.enabled) ($.Values.hpa.useHpaTolerations))}}
      tolerations: 
        {{- if or (.tolerations) }}
          {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 8 }}
        {{- end }}
        {{- if and ($.Values.hpa.enabled) ($.Values.hpa.useHpaTolerations) }}
          {{- include "common.tplvalues.render" (dict "value" $.Values.hpa.hpaTolerations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .priorityClassName }}
      priorityClassName: {{ .priorityClassName }}
      {{- end }}
      containers:
        - name: service-execution
          image: {{ include "common.image.render" (dict "global" $.Values.global "image" .image) }}
          resources: {{- toYaml .resources | nindent 12 }}
          env:
            - name: REDIS_ENABLE_RECONNECT
              value: "true"
            - name: RABBITMQ_ENABLE_RECONNECT
              value: "true"
            - name: TRACING_ENABLED
              value: {{ $.Values.tracing.sentry.runtime.enabled | quote }}
            - name: TRACING_BASE_URL_WITH_PROTOCOL
              value: {{ $.Values.tracing.sentry.runtime.baseUrl | quote }}      
            - name: TRACING_ERRORS_ENABLED
              value: {{ $.Values.tracing.sentry.runtime.errorsEnabled | quote }}
            - name: TRACING_EVENTS_SAMPLE_RATE
              value: {{ $.Values.tracing.sentry.runtime.eventsSampleRate | quote }}
            - name: TRACING_SAMPLE_RATE
              value: {{ $.Values.tracing.sentry.runtime.sampleRate | quote }}
            - name: ENVIRONMENT
              value: {{ $.Values.tracing.environment | quote }}
            - name: COGNIGY_AI_RELEASE_VERSION
              value: {{ $.Chart.AppVersion | quote }}
            - name: FEATURE_USE_NEW_NFS
              value: {{ $.Values.migrateFS.enabled | quote }}
            - name: FEATURE_DEPRECATE_OLD_NFS
              value: {{ $.Values.migrateFS.finished | quote }}		  
            {{- if .extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          ports:
            - name: metrics
              containerPort: 8002
          volumeMounts:
            - name: rabbitmq-connection-string
              mountPath: /var/run/secrets
            {{- if not $.Values.migrateFS.finished }}
            - name: flow-modules
              mountPath: /app/flowModules
            {{- end }}
            {{- if $.Values.migrateFS.enabled }}
            - name: runtime
              mountPath: /app/extensions
              subPath: extensions
            {{- end }}
          startupProbe:
            httpGet:
              path: /health/startup
              port: 8001
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8001
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 10
      volumes:
        {{- if not $.Values.migrateFS.finished }}
        - name: flow-modules
          persistentVolumeClaim:
            claimName: flow-modules
        {{- end }}
        {{- if $.Values.migrateFS.enabled }}
        - name: runtime
          persistentVolumeClaim:
            claimName: runtime
        {{- end }}
        - name: rabbitmq-connection-string
          secret:
            secretName: {{ $statefulRabbitMq_secret }}
            items:
              - key: connection-string
                path: rabbitmqConnectionString
      {{- include "image.pullSecretsCognigy" $ | nindent 6 }}
      securityContext:
        {{- toYaml .securityContext | nindent 8 }}
{{- end }}