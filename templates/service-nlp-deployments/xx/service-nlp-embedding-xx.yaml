{{- if .Values.serviceNlpEmbeddingXx.enabled }}
{{- with .Values.serviceNlpEmbeddingXx }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-nlp-embedding-xx
  namespace: {{ $.Release.Namespace | quote }}
spec:
  selector:
    matchLabels:
      app: service-nlp-embedding-xx
  {{- if not (and ($.Values.hpa.enabled) ($.Values.hpa.removeReplicas) ($.Values.hpa.services.serviceNlpEmbeddingXx.enabled)) }}
  replicas: {{ .replicaCount }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/embedding-models: {{ include (print $.Template.BasePath "/configurations/embedding-models.yaml") $ | sha256sum }}
        {{- if $.Values.cognigyCommonPodAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" $.Values.cognigyCommonPodAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels:
        app: service-nlp-embedding-xx
    spec:
      {{- if .affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if or (.nodeSelector) (and ($.Values.hpa.enabled) ($.Values.hpa.useHpaNodeSelector))}}
      nodeSelector:
        {{- if .nodeSelector }}
          {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 8 }}
        {{- end }}
        {{- if and ($.Values.hpa.enabled) ($.Values.hpa.useHpaNodeSelector) }}
          {{- include "common.tplvalues.render" (dict "value" $.Values.hpa.hpaNodeSelector "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if or (.tolerations) (and ($.Values.hpa.enabled) ($.Values.hpa.useHpaTolerations))}}
      tolerations: 
        {{- if or (.tolerations) }}
          {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 8 }}
        {{- end }}
        {{- if and ($.Values.hpa.enabled) ($.Values.hpa.useHpaTolerations) }}
          {{- include "common.tplvalues.render" (dict "value" $.Values.hpa.hpaTolerations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .priorityClassName }}
      priorityClassName: {{ .priorityClassName }}
      {{- end }}
      containers:
        - name: service-nlp-embedding-xx
          image: {{ include "common.image.render" (dict "global" $.Values.global "image" .image) }}
          args:
            - tritonserver
            - '--model-repository=/models'
            - '--model-control-mode=explicit'
            - '--load-model=usev3'
            - '--strict-readiness=true'
            - '--log-verbose=0'
            - '--log-info=false'
            - '--log-warning=true'
            - '--log-error=true'
          resources: {{- toYaml .resources | nindent 12 }}
          ports:
            - name: http
              containerPort: 8000
            - name: metrics
              containerPort: 8002
          startupProbe:
            httpGet:
              path: /v2/health/ready
              port: 8000
            failureThreshold: 3
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /v2/health/live
              port: 8000
            failureThreshold: 3
            periodSeconds: 60
            timeoutSeconds: 10
            initialDelaySeconds: 90
          volumeMounts:
          - name: model-config
            mountPath: /models/usev3/config.pbtxt
            subPath: usev3-config
      volumes:
        - name: model-config
          configMap:
            name: embedding-model-config
      {{- include "image.pullSecretsCognigy" $ | nindent 6 }}
      securityContext:
        {{- toYaml .securityContext | nindent 8 }}
{{- end }}
{{- end }}