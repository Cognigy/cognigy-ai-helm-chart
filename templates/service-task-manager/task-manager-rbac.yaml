#
# ServiceAccount for the 'task-manager' in order to be able to
# mount a secret as token so we can send API calls
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: task-manager
  namespace: {{ $.Release.Namespace | quote }}

#
# Role so we can control to which type of API objects we actually
# have access.
#
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: task-manager-jobs-admin
  namespace: {{ $.Release.Namespace | quote }}
rules:
- apiGroups: ["batch"] # "" indicates the core API group
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

#
# RoleBinding so our service account has access to the Role above
# in order to programmatically create Jobs
#
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: task-manager-jobs-admin
  namespace: {{ $.Release.Namespace | quote }}
subjects:
- kind: ServiceAccount
  name: task-manager
  apiGroup: ""
roleRef:
  kind: Role
  name: task-manager-jobs-admin
  apiGroup: rbac.authorization.k8s.io