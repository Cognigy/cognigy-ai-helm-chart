{{- $serviceResources_dbSecret := include "common.secretName.render" ( dict "existingSecret" $.Values.dbConnectionString.services.serviceResources.auth.existingSecret "defaultSecret" (printf "cognigy-%s" $.Values.dbConnectionString.services.serviceResources.serviceName)) }}
{{- $statefulRabbitMq_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.statefulRabbitMq.auth.existingSecret "defaultSecret" "cognigy-rabbitmq") }}
{{- $redisHa_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.redisHa.auth.existingSecret "defaultSecret" "cognigy-redis-password") }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-resources-tasks-config
  namespace: {{ $.Release.Namespace | quote }}
data:
  createPackageNFS.yaml: |
    {{- with .Values.taskCreatePackageNfs }}
    ---
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: _NAME_
      namespace: {{ $.Release.Namespace | quote }}
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: {{ .activeDeadlineSeconds }}
      ttlSecondsAfterFinished: {{ .ttlSecondsAfterFinished }}
      template:
        spec:
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
          restartPolicy: Never
          {{- if .affinity }}
          affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 12 }}
          {{- end }}
          {{- if .nodeSelector }}
          nodeSelector: {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 12 }}
          {{- end }}
          {{- if .tolerations }}
          tolerations: {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 12 }}
          {{- end }}
          {{- if .priorityClassName }}
          priorityClassName: {{ .priorityClassName }}
          {{- end }}
          containers:
            - name: task-createpackagenfs
              image: {{ include "common.image.render" (dict "global" $.Values.global "image" .image) }}
              args: [ "node", "/app/build/jobs/createPackage" ]
              resources: {{- toYaml .resources | nindent 16 }}
              envFrom:
                - configMapRef:
                    name: cognigy-env
              env:
                - name: JOB_ARGUMENTS
                  value: "_JOB_ARGUMENTS_"
                - name: TRACING_ENABLED
                  value: {{ $.Values.tracing.sentry.ide.enabled | quote }}
                - name: TRACING_BASE_URL_WITH_PROTOCOL
                  value: {{ $.Values.tracing.sentry.ide.baseUrl | quote }}      
                - name: TRACING_ERRORS_ENABLED
                  value: {{ $.Values.tracing.sentry.ide.errorsEnabled | quote }}
                - name: TRACING_EVENTS_SAMPLE_RATE
                  value: {{ $.Values.tracing.sentry.ide.eventsSampleRate | quote }}
                - name: TRACING_SAMPLE_RATE
                  value: {{ $.Values.tracing.sentry.ide.sampleRate | quote }}
                - name: ENVIRONMENT
                  value: {{ $.Values.tracing.environment | quote }}
                - name: COGNIGY_AI_RELEASE_VERSION
                  value: {{ $.Chart.AppVersion | quote }}
                - name: FEATURE_USE_NEW_NFS
                  value: {{ $.Values.migrateFS.enabled | quote }}
                - name: FEATURE_DEPRECATE_OLD_NFS
                  value: {{ $.Values.migrateFS.finished | quote }}
                {{- if .extraEnvVars }}
                {{- include "common.tplvalues.render" (dict "value" .extraEnvVars "context" $) | nindent 16 }}
                {{- end }}
              volumeMounts:
                - name: mongodb-connection-string
                  mountPath: /var/run/secrets/mongodbConnectionString
                  subPath: mongodbConnectionString
                - name: rabbitmq-connection-string
                  mountPath: /var/run/secrets/rabbitmqConnectionString
                  subPath: rabbitmqConnectionString
                - name: redis-password
                  mountPath: /var/run/secrets/redis-password.conf
                  subPath: redis-password.conf
                {{- if not $.Values.migrateFS.finished }}
                - name: functions
                  mountPath: /app/oldFunctions
                {{- end }}
                {{- if $.Values.migrateFS.enabled }}
                - name: ide
                  mountPath: /app/packages
                  subPath: packages
                - name: ide
                  mountPath: /app/snapshots
                  subPath: snapshots
                {{- end }}
                {{- if .extraVolumeMounts }}
                {{- include "common.tplvalues.render" ( dict "value" .extraVolumeMounts "context" $ ) | nindent 16 }}
                {{- end }}
          volumes:
            - name: mongodb-connection-string
              secret:
                secretName: {{ $serviceResources_dbSecret }}
                items:
                  - key: connection-string
                    path: mongodbConnectionString
            - name: rabbitmq-connection-string
              secret:
                secretName: {{ $statefulRabbitMq_secret }}
                items:
                  - key: connection-string
                    path: rabbitmqConnectionString
            - name: redis-password
              secret:
                secretName: {{ $redisHa_secret }}
            {{- if not $.Values.migrateFS.finished }}
            - name: functions
              persistentVolumeClaim:
                claimName: functions
            {{- end }}
            {{- if $.Values.migrateFS.enabled }}
            - name: ide
              persistentVolumeClaim:
                claimName: ide
            {{- end }}
            {{- if .extraVolumes }}
            {{- include "common.tplvalues.render" ( dict "value" .extraVolumes "context" $ ) | nindent 12 }}
            {{- end }}
          {{- include "image.pullSecretsCognigy" $ | nindent 10 }} 
    {{- end }}
