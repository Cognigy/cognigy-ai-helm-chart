{{- if .Values.cubejs.enabled }}
{{- $cubejs_dbSecret := include "common.secretName.render" ( dict "existingSecret" $.Values.postgresqlExtras.passwords.services.cubejs.auth.existingSecret "defaultSecret" (printf "cognigy-insights-%s-postgres-password" $.Values.postgresqlExtras.passwords.services.cubejs.serviceName)) }}
{{- $cognigyInsightsJwt_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyInsightsJwt.existingSecret "defaultSecret" "cognigy-insights-jwt") }}
{{- with .Values.cubejs.refreshWorker }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cube-refresh-worker
  namespace: {{ $.Release.Namespace | quote }}
spec:
  selector:
    matchLabels:
      app: cube-refresh-worker
  replicas: {{ .replicaCount }}
  template:
    metadata:
      labels:
        app: cube-refresh-worker
      annotations:
        checksum/cognigy-env: {{ include (print $.Template.BasePath "/configurations/cognigy-env.yaml") $ | sha256sum }}
        checksum/secret: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cubejs_dbSecret) }}{{ $cubejs_dbSecret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cubejs_dbSecret).data | sha256sum }}{{ end }}
    spec:
      {{- if .affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .priorityClassName }}
      priorityClassName: {{ .priorityClassName }}
      {{- end }}
      containers:
        - name: cube-refresh-worker
          image: {{ include "common.image.render" (dict "global" $.Values.global "image" .image) }}
          resources: {{- toYaml .resources | nindent 12 }}
          ports:
            - name: http
              containerPort: 4000
          env:
            - name: CUBEJS_DB_TYPE
              value: "postgres"
            - name: CUBEJS_DB_HOST
              value: {{ $.Values.postgresqlExtras.hosts.pgpool | quote }}
            - name: CUBEJS_DB_PORT
              value: {{ $.Values.postgresqlExtras.port | quote }}
            - name: CUBEJS_DB_NAME
              value: {{ $.Values.postgresql.postgresql.database | quote }}
            - name: CUBEJS_DB_USER
              value: {{ $.Values.postgresqlExtras.passwords.services.cubejs.serviceName | quote }}
            # Enable refresh worker
            - name: CUBEJS_REFRESH_WORKER
              value: "true"
            - name: CUBEJS_CUBESTORE_HOST
              value: cube-store-router
            - name: CUBEJS_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ $cubejs_dbSecret }}
                  key: password
            - name: CUBEJS_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyInsightsJwt_secret }}
                  key: secret
            {{- if .extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: cognigy-env
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /livez
              port: http
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 10
      {{- include "image.pullSecrets" $ | nindent 6 }}
      securityContext:
        {{- toYaml .securityContext | nindent 8 }}

{{- end }}
{{- end }}