# This is going to be the default data cleanup cronjob for the new Insights PostgreSQL cluster
{{- if and (.Values.pgoperator.enabled) (.Values.pgoperator.postgresqlClusterInsights.enabled) (.Values.insights.dataCleanup.enabled) }}
{{- $dataCleanup_dbSecret := include "common.secretName.render" ( dict "existingSecret" (tpl .Values.insights.postgresql.auth.insightsUser.existingSecret .) "defaultSecret" "cognigy-insights-postgres-ha-insights") }}
{{- with .Values.insights.dataCleanup }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: insights-data-cleanup-postgres-v2
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    owner-team: gold
spec:
  schedule: {{ .schedule | quote }}
  concurrencyPolicy: {{ .concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ .successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      parallelism: {{ .parallelism }}
      backoffLimit: {{ .backoffLimit }}
      activeDeadlineSeconds: {{ .activeDeadlineSeconds }}
      ttlSecondsAfterFinished: {{ .ttlSecondsAfterFinished }}
      template:
        spec:
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
          restartPolicy: {{ .restartPolicy }}
          {{- if .affinity }}
          affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 12 }}
          {{- end }}
          {{- if .nodeSelector }}
          nodeSelector: {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 12 }}
          {{- end }}
          {{- if .tolerations }}
          tolerations: {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 12 }}
          {{- end }}
          {{- if .priorityClassName }}
          priorityClassName: {{ .priorityClassName }}
          {{- end }}
          containers:
            - name: insights-data-cleanup-postgres-v2
              image: {{ include "common.image.render" (dict "global" $.Values.global "image" $.Values.insights.postgresql.image) }}
              resources: {{- toYaml .resources | nindent 16 }}
              command: ["/bin/sh"]
              args: 
              - -c
              - |
                psql 'postgresql://'$INSIGHTS_POSTGRES_USER':'$INSIGHTS_POSTGRES_PASSWORD'@'$INSIGHTS_POSTGRES_DB_HOST':'$INSIGHTS_POSTGRES_PORT'/'$INSIGHTS_POSTGRES_DB'?sslmode='$INSIGHTS_POSTGRES_SSL << 'EOSQL'
                  
                  \echo '--- Starting data cleanup ---'
                  SET timezone = 'UTC';
                  
                  \echo 'Processing table: analytics'
                  DELETE FROM PUBLIC."analytics_v2" A 
                  USING PUBLIC."insightsdeleterequests" B 
                  WHERE A."organisation" = B."organisation" 
                  AND A."projectId" = ANY (B."projectIds") 
                  AND (A."contactId" = ANY (B."contactIds") OR A."contactId" = ANY (
                      SELECT md5(id)::character varying 
                      FROM unnest(B."contactIds") AS id
                  ) OR B."contactIds" IS NULL) 
                  AND A."timestamp" <= B."requestedAt" 
                  AND B."entityName" = 'analytics' 
                  AND B."requestedAt" >= NOW() - INTERVAL '6 hours';
                  
                  \echo 'Processing table: sessions'
                  DELETE FROM PUBLIC."sessions_v2" A 
                  USING PUBLIC."insightsdeleterequests" B 
                  WHERE A."organisationId" = B."organisation" 
                  AND A."projectId" = ANY (B."projectIds") 
                  AND (A."userId" = ANY (B."contactIds") OR A."userId" = ANY (
                      SELECT md5(id)::character varying 
                      FROM unnest(B."contactIds") AS id
                  ) OR B."contactIds" IS NULL) 
                  AND A."startedAt" <= B."requestedAt" 
                  AND B."entityName" = 'analytics' 
                  AND B."requestedAt" >= NOW() - INTERVAL '6 hours';
                  
                  \echo 'Processing table: conversations'
                  DELETE FROM PUBLIC."conversations_v2" A 
                  USING PUBLIC."insightsdeleterequests" B 
                  WHERE A."organisation" = B."organisation" 
                  AND A."projectId" = ANY (B."projectIds") 
                  AND (A."contactId" = ANY (B."contactIds") OR A."contactId" = ANY (
                      SELECT md5(id)::character varying 
                      FROM unnest(B."contactIds") AS id
                  ) OR B."contactIds" IS NULL) 
                  AND A."timestamp" <= B."requestedAt" 
                  AND B."entityName" = 'conversations' 
                  AND B."requestedAt" >= NOW() - INTERVAL '6 hours';
                  
                  \echo 'Checking for table: liveagentescalations'
                  DELETE FROM PUBLIC."liveagentescalations_v2" A 
                  USING PUBLIC."insightsdeleterequests" B 
                  WHERE EXISTS (SELECT 1 FROM information_schema.tables 
                                WHERE table_schema = 'public' AND table_name = 'liveagentescalations_v2')
                  AND A."organisationId" = B."organisation" 
                  AND A."projectId" = ANY (B."projectIds") 
                  AND (A."contactId" = ANY (B."contactIds") OR A."contactId" = ANY (
                      SELECT md5(id)::character varying 
                      FROM unnest(B."contactIds") AS id
                  ) OR B."contactIds" IS NULL) 
                  AND A."timestamp" <= B."requestedAt" 
                  AND B."entityName" = 'analytics' 
                  AND B."requestedAt" >= NOW() - INTERVAL '6 hours';
                  
                  \echo 'Checking for table: voicegatewayevents'
                  DELETE FROM PUBLIC."voicegatewayevents_v2" A 
                  USING PUBLIC."insightsdeleterequests" B 
                  WHERE EXISTS (SELECT 1 FROM information_schema.tables 
                                WHERE table_schema = 'public' AND table_name = 'voicegatewayevents_v2')
                  AND A."organisationId" = B."organisation" 
                  AND A."projectId" = ANY (B."projectIds") 
                  AND (A."userId" = ANY (B."contactIds") OR A."userId" = ANY (
                      SELECT md5(id)::character varying 
                      FROM unnest(B."contactIds") AS id
                  ) OR B."contactIds" IS NULL) 
                  AND A."timestamp" <= B."requestedAt" 
                  AND B."entityName" = 'analytics' 
                  AND B."requestedAt" >= NOW() - INTERVAL '6 hours';
                  
                  \echo 'Checking for table: goal_v2_events'
                  DELETE FROM PUBLIC."goal_v2_events" A 
                  USING PUBLIC."insightsdeleterequests" B 
                  WHERE EXISTS (SELECT 1 FROM information_schema.tables 
                                WHERE table_schema = 'public' AND table_name = 'goal_v2_events')
                  AND A."organisationId" = B."organisation" 
                  AND A."projectId" = ANY (B."projectIds") 
                  AND (A."contactId" = ANY (B."contactIds") OR A."contactId" = ANY (
                      SELECT md5(id)::character varying 
                      FROM unnest(B."contactIds") AS id
                  ) OR B."contactIds" IS NULL) 
                  AND A."timestamp" <= B."requestedAt" 
                  AND B."entityName" = 'analytics' 
                  AND B."requestedAt" >= NOW() - INTERVAL '6 hours';
                  
                  \echo 'Processing table: stepevents'
                  DELETE FROM PUBLIC."stepevents_v2" A 
                  USING PUBLIC."insightsdeleterequests" B 
                  WHERE A."organisationId" = B."organisation" 
                  AND A."projectId" = ANY (B."projectIds") 
                  AND (A."userId" = ANY (B."contactIds") OR A."userId" = ANY (
                      SELECT md5(id)::character varying 
                      FROM unnest(B."contactIds") AS id
                  ) OR B."contactIds" IS NULL) 
                  AND A."timestamp" <= B."requestedAt" 
                  AND B."entityName" = 'analytics' 
                  AND B."requestedAt" >= NOW() - INTERVAL '6 hours';
                  
                  \echo '--- Data cleanup completed ---'
                EOSQL
              env:
              - name: INSIGHTS_POSTGRES_DB_HOST
                value: {{ include "common.tplvalues.render" (dict "value" $.Values.insights.postgresql.cluster.host "context" $) | quote }}
              {{- if $.Values.insights.postgresql.cluster.readReplica.useReadReplica }}
              - name: INSIGHTS_POSTGRES_DB_REPLICA_HOST
                value: {{ include "common.tplvalues.render" (dict "value" $.Values.insights.postgresql.cluster.readReplica.host "context" $) | quote }}
              {{- end }}
              - name: INSIGHTS_POSTGRES_DB
                value: {{ $.Values.insights.postgresql.database.name | quote }}
              - name: INSIGHTS_POSTGRES_SSL
                value: {{ $.Values.insights.postgresql.cluster.sslmode | quote }}
              - name: INSIGHTS_POSTGRES_PORT
                value: {{ $.Values.insights.postgresql.cluster.port | quote }}
              - name: INSIGHTS_POSTGRES_USER
                valueFrom:
                  secretKeyRef:
                    name: {{ $dataCleanup_dbSecret }}
                    key: username
              - name: INSIGHTS_POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ $dataCleanup_dbSecret }}
                    key: password
          {{- include "image.pullSecretsCognigy" $ | nindent 10 }}
{{- end }}
{{- end }}