{{- if .Values.insightsDataCleanupJob.enabled }}
{{- $dataCleanup_dbCollectorSecret := include "common.secretName.render" ( dict "existingSecret" $.Values.dbConnectionString.services.serviceAnalyticsCollector.auth.existingSecret "defaultSecret" (printf "cognigy-%s" $.Values.dbConnectionString.services.serviceAnalyticsCollector.serviceName)) }} 
{{- $dataCleanup_dbConversationsSecret := include "common.secretName.render" ( dict "existingSecret" $.Values.dbConnectionString.services.serviceAnalyticsConversations.auth.existingSecret "defaultSecret" (printf "cognigy-%s" $.Values.dbConnectionString.services.serviceAnalyticsConversations.serviceName)) }} 
{{- with .Values.insightsDataCleanupJob }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: insights-data-cleanup-mongodb
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    owner-team: gold
spec:
  schedule: {{ .schedule | quote }}
  concurrencyPolicy: {{ .concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ .successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      parallelism: {{ .parallelism }}
      backoffLimit: {{ .backoffLimit }}
      activeDeadlineSeconds: {{ .activeDeadlineSeconds }}
      ttlSecondsAfterFinished: {{ .ttlSecondsAfterFinished }}
      template:
        spec:
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
          restartPolicy: {{ .restartPolicy }}
          {{- if .affinity }}
          affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 12 }}
          {{- end }}
          {{- if .nodeSelector }}
          nodeSelector: {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 12 }}
          {{- end }}
          {{- if .tolerations }}
          tolerations: {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 12 }}
          {{- end }}
          {{- if .priorityClassName }}
          priorityClassName: {{ .priorityClassName }}
          {{- end }}
          containers:
            - name: insights-data-cleanup-mongodb
              image: {{ include "common.image.render" (dict "global" $.Values.global "image" .image) }}
              resources: {{- toYaml .resources | nindent 16 }}
              command: ["/bin/sh"]
              args: 
              - -c
              - |
                echo "Starting insights data cleanup mongodb job..."

                mongosh $INSIGHTS_COLLECTOR_CONNECTION_STRING \
                --eval 'function hashMd5(str) { return require("crypto").createHash("md5").update(str).digest("hex"); }' \
                --eval 'function clone(obj) { return JSON.parse(JSON.stringify(obj)); }' \
                --eval 'const deleteAnalyticsRecords = db.insightsdeleterequests.find({requestedAt: {$gte: new Date(Date.now() - 6*60*60*1000)}}, {projectId: 1, organisation: 1, contactIds: 1, requestedAt:1, _id: 0}).toArray()' \
                --eval 'const deleteQueriesAnalytics = deleteAnalyticsRecords.map(doc => { const cloned = clone(doc); cloned.timestamp = {$lte: new Date(doc.requestedAt)}; delete cloned.requestedAt; if (cloned.contactIds) { const hashed = cloned.contactIds.map(id => hashMd5(id)); cloned.contactId = {$in: [...cloned.contactIds, ...hashed]}; delete cloned.contactIds; } return cloned; })' \
                --eval 'if (deleteQueriesAnalytics.length) { print("Deleting analytics data"); printjson(db.analytics.deleteMany({$or: deleteQueriesAnalytics})); }' \
                --eval 'const deleteQueriesSessions = deleteQueriesAnalytics.map((orig, index) => { const doc = clone(orig); const originalRecord = deleteAnalyticsRecords[index]; doc.startedAt = {$lte: new Date(originalRecord.requestedAt)}; delete doc.timestamp; if (doc.contactId) { doc.userId = doc.contactId; delete doc.contactId; } doc.organisationId = new ObjectId(doc.organisation); delete doc.organisation; doc.projectId = new ObjectId(doc.projectId); return doc; })' \
                --eval 'if (deleteQueriesSessions.length) { print("Deleting sessions data"); printjson(db.sessions.deleteMany({$or: deleteQueriesSessions})); }' \
                --eval 'const deleteQueriesLiveAgentEscalations = deleteQueriesAnalytics.map((orig, index) => { const doc = clone(orig); const originalRecord = deleteAnalyticsRecords[index]; doc.timestamp = {$lte: new Date(originalRecord.requestedAt)}; doc.organisationId = doc.organisation; delete doc.organisation; return doc; })' \
                --eval 'if (deleteQueriesLiveAgentEscalations.length) { print("Deleting liveagentescalations data"); printjson(db.liveagentescalations.deleteMany({$or: deleteQueriesLiveAgentEscalations})); }' \
                --eval 'const deleteQueriesVoiceGatewayEvents = deleteQueriesAnalytics.map((orig, index) => { const doc = clone(orig); const originalRecord = deleteAnalyticsRecords[index]; doc.timestamp = {$lte: new Date(originalRecord.requestedAt)}; if (doc.contactId) { doc.userId = doc.contactId; delete doc.contactId; } doc.organisationId = doc.organisation; delete doc.organisation; return doc; })' \
                --eval 'if (deleteQueriesVoiceGatewayEvents.length) { print("Deleting voicegatewayevents data"); printjson(db.voicegatewayevents.deleteMany({$or: deleteQueriesVoiceGatewayEvents})); }' \
                --eval 'const deleteQueriesStepEvents = deleteQueriesAnalytics.map((orig, index) => { const doc = clone(orig); const originalRecord = deleteAnalyticsRecords[index]; doc.timestamp = {$lte: new Date(originalRecord.requestedAt)}; if (doc.contactId) { doc.userId = doc.contactId; delete doc.contactId; } doc.organisationId = new ObjectId(doc.organisation); delete doc.organisation; doc.projectId = new ObjectId(doc.projectId); return doc; })' \
                --eval 'if (deleteQueriesStepEvents.length) { print("Deleting stepevents data"); printjson(db.stepevents.deleteMany({$or: deleteQueriesStepEvents})); }'
                
                mongosh $INSIGHTS_CONVERSATIONS_CONNECTION_STRING \
                --eval 'function hashMd5(str) { return require("crypto").createHash("md5").update(str).digest("hex"); }' \
                --eval 'const deleteConversationRecords = db.insightsdeleterequests.find({requestedAt: {$gte: new Date(Date.now() - 6*60*60*1000)}}, {projectIds: 1, organisation: 1, contactIds: 1, requestedAt: 1, _id: 0}).toArray()' \
                --eval 'const deleteQueriesConversations = deleteConversationRecords.map(doc => {doc.timestamp = {$lte: doc.requestedAt}; delete doc.requestedAt; if (doc.contactIds) {const hashedIds = doc.contactIds.map(id => hashMd5(id)); doc.contactId = {$in: [...doc.contactIds, ...hashedIds]}; delete doc.contactIds;}; if (doc.projectIds) {doc.projectId = Array.isArray(doc.projectIds) ? {$in: doc.projectIds} : doc.projectIds; delete doc.projectIds;}; return doc; })' \
                --eval 'if (deleteQueriesConversations.length) { print("Deleting conversations data"); printjson(db.conversations.deleteMany({$or: deleteQueriesConversations})); }'
              env:
                - name: INSIGHTS_COLLECTOR_CONNECTION_STRING
                  valueFrom:
                    secretKeyRef:
                      name: {{ $dataCleanup_dbCollectorSecret }}
                      key: connection-string
                - name: INSIGHTS_CONVERSATIONS_CONNECTION_STRING
                  valueFrom:
                    secretKeyRef:
                      name: {{ $dataCleanup_dbConversationsSecret }}
                      key: connection-string
          {{- include "image.pullSecretsCognigy" $ | nindent 10 }}
{{- end }}
{{- end }}