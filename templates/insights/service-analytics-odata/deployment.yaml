{{- $cognigyOdata_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.commonSecrets.cognigyOdata.existingSecret "defaultSecret" "cognigy-odata") }}
{{- $statefulRabbitMq_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.statefulRabbitMq.auth.existingSecret "defaultSecret" "cognigy-rabbitmq") }}
{{- $redisHa_secret := include "common.secretName.render" ( dict "existingSecret" $.Values.redisHa.auth.existingSecret "defaultSecret" "cognigy-redis-password") }}
{{- $serviceAnalyticsCollector_dbSecret := include "common.secretName.render" ( dict "existingSecret" $.Values.dbConnectionString.services.serviceAnalyticsCollector.auth.existingSecret "defaultSecret" (printf "cognigy-%s" $.Values.dbConnectionString.services.serviceAnalyticsCollector.serviceName)) }}
{{- $serviceSecurity_dbSecret := include "common.secretName.render" ( dict "existingSecret" $.Values.dbConnectionString.services.serviceSecurity.auth.existingSecret "defaultSecret" (printf "cognigy-%s" $.Values.dbConnectionString.services.serviceSecurity.serviceName)) }}
{{- $serviceAnalyticsConversations_dbSecret := include "common.secretName.render" ( dict "existingSecret" $.Values.dbConnectionString.services.serviceAnalyticsConversations.auth.existingSecret "defaultSecret" (printf "cognigy-%s" $.Values.dbConnectionString.services.serviceAnalyticsConversations.serviceName)) }}
{{- $serviceAnalyticsOdata_dbSecret := include "cubejs.postgresql.password.existingSecret" $ }}
{{- with .Values.serviceAnalyticsOdata }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-analytics-odata
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    owner-team: gold
spec:
  selector:
    matchLabels:
      app: service-analytics-odata
  replicas: {{ .replicaCount }}
  template:
    metadata:
      labels:
        app: service-analytics-odata
      annotations:
        checksum/cognigy-env: {{ include (print $.Template.BasePath "/configurations/cognigy-env.yaml") $ | sha256sum }}
        checksum/rabbitmq: {{ if not (lookup "v1" "Secret" $.Release.Namespace $statefulRabbitMq_secret) }}{{ $statefulRabbitMq_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $statefulRabbitMq_secret).data | sha256sum }}{{ end }}
        checksum/redis: {{ if not (lookup "v1" "Secret" $.Release.Namespace $redisHa_secret) }}{{ $redisHa_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $redisHa_secret).data | sha256sum }}{{ end }}
        checksum/secret: {{ if not (lookup "v1" "Secret" $.Release.Namespace $cognigyOdata_secret) }}{{ $cognigyOdata_secret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $cognigyOdata_secret).data | sha256sum }}{{ end }}
        checksum/service-analytics-collector: {{ if not (lookup "v1" "Secret" $.Release.Namespace $serviceAnalyticsCollector_dbSecret) }}{{ $serviceAnalyticsCollector_dbSecret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $serviceAnalyticsCollector_dbSecret).data | sha256sum }}{{ end }}
        checksum/service-security: {{ if not (lookup "v1" "Secret" $.Release.Namespace $serviceSecurity_dbSecret) }}{{ $serviceSecurity_dbSecret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $serviceSecurity_dbSecret).data | sha256sum }}{{ end }}
        checksum/service-analytics-conversation: {{ if not (lookup "v1" "Secret" $.Release.Namespace $serviceAnalyticsConversations_dbSecret) }}{{ $serviceAnalyticsConversations_dbSecret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $serviceAnalyticsConversations_dbSecret).data | sha256sum }}{{ end }}
        {{- if and ($.Values.pgoperator.enabled) ($.Values.cubejs.enabled) }}
        checksum/postgres: {{ if not (lookup "v1" "Secret" $.Release.Namespace $serviceAnalyticsOdata_dbSecret) }}{{ $serviceAnalyticsOdata_dbSecret | sha256sum }}{{ else }}{{ toYaml (lookup "v1" "Secret" $.Release.Namespace $serviceAnalyticsOdata_dbSecret).data | sha256sum }}{{ end }}
        {{- end }}
        {{- if $.Values.cognigyCommonPodAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" $.Values.cognigyCommonPodAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .priorityClassName }}
      priorityClassName: {{ .priorityClassName }}
      {{- end }}
      containers:
        - name: service-analytics-odata
          image: {{ include "common.image.render" (dict "global" $.Values.global "image" .image) }}
          resources: {{- toYaml .resources | nindent 12 }}
          ports:
            - name: metrics
              containerPort: 8002
          envFrom:
            - configMapRef:
                name: cognigy-env
          env:
            - name: RABBITMQ_ENABLE_RECONNECT
              value: "true"
            {{- if and ($.Values.pgoperator.enabled) ($.Values.cubejs.enabled) }}
            - name: INSIGHTS_POSTGRES_DB_NAME
              value: {{ $.Values.cubejs.postgresql.database | quote }}
            - name: INSIGHTS_POSTGRES_DB_HOST
              value: {{ include "cognigy-ai.cubejs.postgresql.host" $ | quote }}
            - name: INSIGHTS_POSTGRES_DB_PORT
              value: {{ $.Values.cubejs.postgresql.port | quote }}
            - name: INSIGHTS_POSTGRES_DB_USERNAME
              value: {{ $.Values.cubejs.postgresql.username | quote }}
            - name: INSIGHTS_POSTGRES_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $serviceAnalyticsOdata_dbSecret }}
                  key: password
            {{- end }}
            - name: ANALYTICS_COLLECTOR_DB_NAME
              value: service-analytics-collector
            - name: SECURITY_DB_NAME
              value: service-security
            - name: CONVERSATION_COLLECTOR_DB_NAME
              value: service-analytics-conversation
            - name: TRACING_ENABLED
              value: {{ $.Values.tracing.sentry.insights.enabled | quote }}
            - name: TRACING_BASE_URL_WITH_PROTOCOL
              value: {{ $.Values.tracing.sentry.insights.baseUrl | quote }}      
            - name: TRACING_ERRORS_ENABLED
              value: {{ $.Values.tracing.sentry.insights.errorsEnabled | quote }}
            - name: TRACING_EVENTS_SAMPLE_RATE
              value: {{ $.Values.tracing.sentry.insights.eventsSampleRate | quote }}
            - name: TRACING_SAMPLE_RATE
              value: {{ $.Values.tracing.sentry.insights.sampleRate | quote }}
            - name: ENVIRONMENT
              value: {{ $.Values.tracing.environment | quote }}
            - name: COGNIGY_AI_RELEASE_VERSION
              value: {{ $.Chart.AppVersion | quote }}
            - name: ODATA_SUPER_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $cognigyOdata_secret }}
                  key: odata-super-api-key
            {{- if .extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: rabbitmq-connection-string
              mountPath: /var/run/secrets/rabbitmqConnectionString
              subPath: rabbitmqConnectionString
            - name: analytics-collector-connection-string
              mountPath: /run/secrets/analyticsCollectorConnectionString
              subPath: analyticsCollectorConnectionString
            - name: security-connection-string
              mountPath: /run/secrets/securityConnectionString
              subPath: securityConnectionString
            - name: conversations-connection-string
              mountPath: /run/secrets/conversationsConnectionString
              subPath: conversationsConnectionString
            - name: redis-password
              mountPath: /var/run/secrets/redis-password.conf
              subPath: redis-password.conf
          startupProbe:
            httpGet:
              path: /health/startup
              port: 8001
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8001
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 10
      volumes:
        - name: rabbitmq-connection-string
          secret:
            secretName: {{ $statefulRabbitMq_secret }}
            items:
              - key: connection-string
                path: rabbitmqConnectionString
        - name: analytics-collector-connection-string
          secret:
            secretName: {{ $serviceAnalyticsCollector_dbSecret }}
            items:
              - key: connection-string
                path: analyticsCollectorConnectionString
        - name: security-connection-string
          secret:
            secretName: {{ $serviceSecurity_dbSecret }}
            items:
              - key: connection-string
                path: securityConnectionString
        - name: conversations-connection-string
          secret:
            secretName: {{ $serviceAnalyticsConversations_dbSecret }}
            items:
              - key: connection-string
                path: conversationsConnectionString
        - name: redis-password
          secret:
            secretName: {{ $redisHa_secret }}
      {{- include "image.pullSecretsCognigy" $ | nindent 6 }}
      securityContext:
        {{- toYaml .securityContext | nindent 8 }}
{{- end }}