# If cognigy provided mongodb helm chart(https://github.com/Cognigy/cognigy-mongodb-helm-chart) is not in use then set "mongodb.enabled" to false. It will skip doing all corresponding task related to mongodb helm chart, such as creating necessary database. By default it is always enabled.
# mongodb:
#   enabled: false

# This MongoDB user and password should have the permission to create users and databases, so normally it is admin or root
# It does NOT have to be root user. We use these key names to be compatible with Bitnami MongoDB Helm Chert
mongodb:
  enabled: true 
  auth:
    rootUser: root
    rootPassword: ""
    ## Existing secret with MongoDB credentials. Mandatory keys: `username` and `password`, that contains the value 
    ## of "rootUser" and "rootPassword"
    ## NOTE: When it's set the previous parameters "rootUser" and "rootPassword" are ignored.
    ##
    existingSecret: ""
  # Default value for the MongoDB replica set deployed by Cognigy MongoDB Helm Chart into 3 availability zones:
  # hosts: mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-1.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-2.mongodb-headless.mongodb.svc.cluster.local:27017
  # for development and testing purposes with a single replica MongoDB installation in "mongodb" namespace use:
  # hosts: "mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017"
  hosts: mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-1.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-2.mongodb-headless.mongodb.svc.cluster.local:27017

## Credentials for pulling image from private image registry.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
## NOTE 1: Either clear text credentials (registry, username and password) or pullSecrets must be provided.
## NOTE 2: If traefik is enabled and you provide clear text credentials, then traefik.deployment.imagePullSecrets must
## be set to "cognigy-registry-token". If you set custom pullSecrets value instead, set the same value under traefik.deployment.imagePullSecrets
imageCredentials:
  ## Alternatively specify the username, password and the url of the private registry.
  ## A kubernetes.io/dockerconfigjson type secret named "cognigy-registry-token" will be created based on these information.
  registry: "cognigy.azurecr.io"
  username: ""
  password: ""

  ## Alternatively specify an array of imagePullSecrets.
  ## Secrets must be manually created in the proper namespace beforehand.
  ## Example:
  ## pullSecrets:
  ##   - cognigyRegistrySecretName
  ##
  ## NOTE: When registry, username and password all are set, the pullSecrets are ignored.
  pullSecrets: []

# Cognigy supports 3 cloud providers:
# - aws
# - azure
# - generic for on-premises installation e.g. with OpenShift
cloud:
  provider: aws
  region: ""

# For AWS cloud provider only:
efs:
  flowModules:
    id: ""
  functions:
    id: ""

cognigyLiveAgent:
  platformToken: ""
  ## Existing secret with live-agent credentials. The secret must have the following key:
  ##   "cognigy-live-agent-platform-token": The token for cognigy live agent
  ##
  ## NOTE: When cognigyLiveAgent.existingSecret is set, clear text token passed in the previous parameter
  ## "cognigyLiveAgent.platformToken" is ignored.
  existingSecret: ""

# Install Management UI on the cluster.
# It is not required, since if not installed and the API endpoint is accessible from the Internet, you can still use the provided Management UI at https://management-ui-v4.cognigy.ai/
managementUi:
  enabled: false
  ingress:
    enabled: true
    host: ""
  image: cognigy.azurecr.io/management-ui:49120040ac4bd68a2a03175bbe2a5cd334285339
  replicaCount: 1
  resources:
    limits:
      memory: "30Mi"
      cpu: "20m"
    requests:
      memory: "10Mi"
      cpu: "10m"
  extraEnvVars: []

## managementUiCredentials: '[{"username": "example_username", "password": "example_password"}]'
managementUiCredentials: '[]'
## The name of an existing secret with management UI credentials. The secret must have a
## "management-ui-creds.json" key from where the password will be extracted and the content of that key 
## should be in the following format-
##    [{"username": "user", "password": "pass"}, {"username": "user2", "password": "pass2"}]
## NOTE: When this is set, clear text credentials passed in the variable "managementUiCredentials" is ignored.
managementUiCredentialsExistingSecret: ""


## SMTP server information for 'forgot password' functionality.
## Password for the SMTP server.
## A secret named "cognigy-smtp" will be created based on the information provided.
smtpPassword: ""
## The name of an existing secret with SMTP server credentials. The secret must have a
## "system-smtp-password" key from where the password will be extracted.
## NOTE: When this is set, "smtpPassword" is ignored.
smtpPasswordExistingSecret: ""


## Traefik TLS certificate for the hostname defined at ingress.<service_name>.host
## NOTE: If you provide "tls.enable: true" and "traefik.enabled: true", either tls.crt and tls.key or tls.existingSecret must be provided.
tls:
  ## Enable traefik tls
  ## NOTE: If traefik is enabled ("traefik.enabled: true"), and you provide "tls.enable: false", then the auto redirection of http to https
  ## also must be disabled by setting traefik.ports.web.redirectTo: null
  enabled: true
  ## Add Custom CA certificate. A tls type secret named "cognigy-traefik" will be created based on the values of tls.crt and tls.key
  ## Careful with the indentation
  ## For more information, see https://helm.sh/docs/chart_template_guide/yaml_techniques/#strings-in-yaml
  ##
  ## Custom CA certificate in plaintext, not base64 encoded.
  ## Example:
  ##   crt: |
  ##     -----BEGIN CERTIFICATE-----
  ##     -----END CERTIFICATE-----
  crt: ""
  ## CA certificate private key in plaintext, not base64 encoded.
  ## Example:
  ## key: |
  ##   -----BEGIN PRIVATE KEY-----
  ##   -----END PRIVATE KEY-----
  key: ""
  ## Existing secret with TLS certificates. The secret must have the following two keys:
  ## "tls.crt": Containing the CA certificate
  ## "tls.key": Containing the certificate key
  ## NOTE: When tls.existingSecret is set, clear text certificate passed in the previous parameters "tls.crt" and "tls.key" are ignored.
  existingSecret: ""


# If ingress is not required to deploy then you can set "ingress.enabled" to false. By default it is always enabled.
# ingress:
#   enabled: false

ingress:
  enabled: true
  serviceAnalyticsOdata:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceApi:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceEndpoint:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceInsightsApi:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceUi:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceWebchat:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0

## Kubernetes service type
##
service:
  serviceAnalyticsOdata:
    ## Optional Service annotations.
    ## Example:
    ## annotations:
    ##   service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    ##   service.name: service-analytics-odata
    ##
    annotations: {}
  serviceApi:
    annotations: {}
  serviceEndpoint:
    annotations: {}
  serviceInsightsApi:
    annotations: {}
  serviceInsightsUi:
    annotations: {}
  serviceUi:
    annotations: {}
  serviceWebchat:
    annotations: {}
  statefulRabbitMq:
    annotations: {}
  statefulRedis:
    annotations: {}
  statefulRedisPersistent:
    annotations: {}

cognigyEnv:
  NODE_ENV: production

  # Enable the creation of metrics which will then get consumed
  # by our 'service-monitoring'.
  MONITOR_RPC_CALLS: "true"

  # Redis configuration, will soon be a connection string
  REDIS_HOST: redis
  REDIS_PORT: "6379"

  # Redis (persistent) configuration, will soon be a connection string
  REDIS_PERSISTENT_PORT: "6379"
  REDIS_PERSISTENT_HOST: redis-persistent

  # limits (api requests, db queries, context-size)
  MESSAGE_TTL_SECONDS: "120"
  MAX_MEMORY_OBJECT_SIZE: "65536"
  HTTP_JSON_BODY_LIMIT: "65536"
  MAX_BYTE_SIZE: "524288"
  RESPONSE_BYTES_LIMIT: "524288"

  # features (enable / disable)
  FEATURE_CUSTOM_NODES: "true"

  # log cleanup
  LOG_ENTRIES_TTL_IN_MINUTES: "1440"
  LOG_ENTRIES_BUFFER_IN_SECONDS: "5"

  # SMTP server for 'forgot password' functionality
  SYSTEM_SMTP_HOST: "test"
  SYSTEM_SMTP_PORT: "test"
  SYSTEM_SMTP_USERNAME: "test"
  SYSTEM_SMTP_FROM: "test"
  SYSTEM_SMTP_CONNECTION_TYPE: "starttls"
  # SYSTEM_SMTP_PASSWORD is a secret!

  # Domains to whitelist for cors for the API (service-api)
  API_CORS_WHITELIST: ""

  # Execution relevant configuration (service-execution)
  MODULE_MAX_EVENT_EMISSIONS: "10"
  MAX_MODULE_EXECUTION_TIME_IN_SECONDS: "20"

  # Endpoint configuration for Alexa
  ALEXA_END_SESSION_AFTER_EACH_REPLY: "true"

  # Enable max contact profile TTL in minutes
  MAX_CONTACT_PROFILE_TTL_IN_MINUTES: "43200"

  # Enable max conversation TTL in minutes
  MAX_CONVERSATION_TTL_IN_MINUTES: "43200"

  # Enable max conversation TTL in minutes
  MAX_SESSION_STATE_TTL_IN_MINUTES: "10080"

  # Enable new Cognigy Insights UI
  FEATURE_USE_SERVICE_INSIGHTS_UI: "true"


amazonCredentials:
  ## The client id from amazon.developers.com
  clientId: ""
  ## The client secret from amazon.developers.com
  clientSecret: ""
  ## Existing secret with amazon credentials. The secret must have the following two keys:
  ##   "amazon-client-id": The client id from amazon.developers.com
  ##   "amazon-client-secret": The client secret from amazon.developers.com
  ##
  ## NOTE: When amazonCredentials.existingSecret is set, clear text credentials passed in the previous parameters
  ## "amazonCredentials.clientId" and "amazonCredentials.clientSecret" are ignored.
  existingSecret: ""

# Stateful Backend Components
statefulRabbitMq:
  image: cognigy.azurecr.io/rabbitmq:3.9.20_cognigy-4.X
  replicaCount: 1
  resources:
    limits:
      memory: 2Gi
      cpu: "2"
    requests:
      memory: 1Gi
      cpu: "1"
  extraEnvVars: []
  securityContext:
    runAsUser: 1337
    runAsGroup: 1337

# If redis is not required to deploy then you can set the "statefulRedis.enabled" flag to false. By default it is always enabled. 
# statefulRedis:
#   enabled: false

statefulRedis:
  enabled: true
  image: cognigy.azurecr.io/redis:5.0.14_cognigy_4.X
  replicaCount: 1
  resources:
    limits:
      memory: 512Mi
      cpu: "0.5"
    requests:
      memory: 100Mi
      cpu: "0.2"
  extraEnvVars: []
  securityContext: {}

# If redis-persistent is not required to deploy then you can set the "statefulRedis.enabled" flag to false. By default it is always enabled.
# statefulRedisPersistent: 
#   enabled: false

statefulRedisPersistent:
  enabled: true
  image: cognigy.azurecr.io/redis:5.0.14_cognigy_4.X
  replicaCount: 1
  resources:
    limits:
      memory: 512Mi
      cpu: "0.5"
    requests:
      memory: 100Mi
      cpu: "0.2"
  extraEnvVars: []
  securityContext: {}

# Cognigy.AI components images
serviceAi:
  image: cognigy.azurecr.io/service-ai:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.4'
      memory: 400M
    limits:
      cpu: '0.4'
      memory: 500M
  ## Optionally specify list of additional volumes
  ## Examples:
  ## extraVolumes:
  ##   - name: foo
  ##     secret:
  ##       secretName: mysecret
  ##       optional: false
  ##   - name: config-volume
  ##     configMap:
  ##       name: special-config
  ##       items:
  ##       - key: SPECIAL_LEVEL
  ##         path: keys
  extraVolumes: []
  ## Optionally specify list of additional volumeMounts
  ## Examples:
  ## extraVolumeMounts:
  ##   - name: foo
  ##     mountPath: "/etc/foo"
  ##     readOnly: true
  ##   - name: config-volume
  ##     mountPath: /etc/config
  extraVolumeMounts: []
  ## Optionally specify list of extra environment variables to add to the container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  securityContext: {}
serviceAlexaManagement:
  image: cognigy.azurecr.io/service-alexa-management:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceAnalyticsCollector:
  image: cognigy.azurecr.io/service-analytics-collector:release-1d68f5d-1660559908
  replicaCount: 3
  resources:
    requests:
      cpu: '0.300'
      memory: 160M
    limits:
      cpu: '0.300'
      memory: 200M
  extraEnvVars: []
  securityContext: {}
serviceAnalyticsConversations:
  image: cognigy.azurecr.io/service-analytics-conversations:release-d309915-1661363252
  replicaCount: 3
  requests:
    cpu: '0.1'
    memory: 120M
  limits:
    cpu: '0.3'
    memory: 250M
  extraEnvVars: []
  securityContext: {}
serviceAnalyticsOdata:
  image: cognigy.azurecr.io/service-analytics-odata:release-cbfec78-1661363304
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 360M
    limits:
      cpu: '0.5'
      memory: 450M
  extraEnvVars: []
  securityContext: {}
serviceAnalyticsRealtime:
  image: cognigy.azurecr.io/service-analytics-realtime:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceAnalyticsReporter:
  image: cognigy.azurecr.io/service-analytics-reporter:release-4e769c8-1660559909
  replicaCount: 3
  resources:
    requests:
      cpu: '0.5'
      memory: 500M
    limits:
      cpu: '0.5'
      memory: 750M
  extraEnvVars: []
  securityContext: {}
serviceApi:
  image: cognigy.azurecr.io/service-api:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 280M
    limits:
      cpu: '0.4'
      memory: 350M
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVars: []
  securityContext: {}
serviceCustomModules:
  image: cognigy.azurecr.io/service-custom-modules:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.3'
      memory: 512M
    limits:
      cpu: '0.3'
      memory: 512M
  extraEnvVars: []
  securityContext: {}
serviceEndpoint:
  image: cognigy.azurecr.io/service-endpoint:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 120M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceExecution:
  image: cognigy.azurecr.io/service-execution:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '1'
      memory: 240M
    limits:
      cpu: '1'
      memory: 300M
  extraEnvVars: []
  securityContext: {}
serviceFunctionExecution:
  image: cognigy.azurecr.io/service-function-execution:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '1'
      memory: 512M
    limits:
      cpu: '2'
      memory: 512M
  extraEnvVars: []
  securityContext: {}
serviceFunctionScheduler:
  image: cognigy.azurecr.io/service-function-scheduler:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceHandover:
  image: cognigy.azurecr.io/service-handover:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceHttp:
  image: cognigy.azurecr.io/service-http:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.1'
      memory: 75M
  extraEnvVars: []
  securityContext: {}
serviceInsightsApi:
  image: cognigy.azurecr.io/service-insights-api:release-d181a08-1660559912
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.1'
      memory: 75M
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVars: []
  securityContext: {}
serviceInsightsUi:
  image: cognigy.azurecr.io/service-insights-ui:release-91eddec-1660559908
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVars: []
  securityContext: {}
serviceJourneys:
  image: cognigy.azurecr.io/service-journeys:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 100M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceLogs:
  image: cognigy.azurecr.io/service-logs:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 100M
    limits:
      cpu: '0.5'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceNlpMatcher:
  image: cognigy.azurecr.io/service-nlp-matcher:0227b90a16c8fa7cc4dff440664437bca3f7dfd3
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 300M
    limits:
      cpu: '0.5'
      memory: 500M
  extraEnvVars: []
  securityContext: {}
serviceNlpNer:
  image: cognigy.azurecr.io/service-nlp-ner:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.3'
      memory: 100M
    limits:
      cpu: '1.0'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceParser:
  image: cognigy.azurecr.io/service-parser:ece6bf2420e668e80d0f3cf65589f18b091dd8da
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
servicePlaybookExecution:
  image: cognigy.azurecr.io/service-playbook-execution:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceProfiles:
  image: cognigy.azurecr.io/service-profiles:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceResources:
  image: cognigy.azurecr.io/service-resources:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 512M
    limits:
      cpu: '0.5'
      memory: 512M
  extraEnvVars: []
  securityContext: {}
serviceSecurity:
  image: cognigy.azurecr.io/service-security:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 60M
    limits:
      cpu: '0.4'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceSessionStateManager:
  image: cognigy.azurecr.io/service-session-state-manager:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.4'
      memory: 400M
    limits:
      cpu: '0.4'
      memory: 500M
  extraEnvVars: []
  securityContext: {}
serviceTaskManager:
  image: cognigy.azurecr.io/service-task-manager:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceTrainer:
  image: cognigy.azurecr.io/service-trainer:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceUi:
  image: cognigy.azurecr.io/service-ui:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVars: []
  securityContext: {}
serviceWebchat:
  image: cognigy.azurecr.io/service-webchat:0ad6deac4e6bf5c20682b59342d1f4a410079ced
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraEnvVars: []
  securityContext: {}
serviceNlpQaDe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-qa-de:bc8b0e5ebde7bf86dd6c72c6e553774fe855fa8c
  replicaCount: 1
  resources:
    requests:
      cpu: '1'
      memory: 3G
    limits:
      cpu: '1'
      memory: 3G
  extraEnvVars: []
  securityContext: {}
serviceNlpScoreDe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 800M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}
serviceNlpTrainDe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 800M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}
serviceNlpQaEn:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-qa-en:bc8b0e5ebde7bf86dd6c72c6e553774fe855fa8c
  replicaCount: 1
  resources:
    requests:
      cpu: '1'
      memory: 3G
    limits:
      cpu: '1'
      memory: 3G
  extraEnvVars: []
  securityContext: {}
serviceNlpScoreEn:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-en:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}
serviceNlpTrainEn:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-en:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}
serviceNlpQaGe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-qa-ge:bc8b0e5ebde7bf86dd6c72c6e553774fe855fa8c
  replicaCount: 1
  resources:
    requests:
      cpu: '1'
      memory: 3G
    limits:
      cpu: '1'
      memory: 3G
  extraEnvVars: []
  securityContext: {}
serviceNlpScoreGe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ge:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 3000M
    limits:
      cpu: '2'
      memory: 4000M
  extraEnvVars: []
  securityContext: {}
serviceNlpTrainGe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ge:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 3000M
    limits:
      cpu: '2'
      memory: 4000M
  extraEnvVars: []
  securityContext: {}
serviceNlpScoreJa:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ja:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}
serviceNlpTrainJa:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ja:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}
serviceNlpScoreKo:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ko:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}
serviceNlpTrainKo:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ko:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}
serviceNlpScoreXx:
  enabled: false
  image: cognigy.azurecr.io/service-nlp:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 800M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}
serviceNlpTrainXx:
  enabled: false
  image: cognigy.azurecr.io/service-nlp:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 800M
    limits:
      cpu: '1'
      memory: 2500M
  extraEnvVars: []
  securityContext: {}

## You can enable the pod monitor if any prometheus instance is ruinning on your cluster.
podMonitors:
  enabled: false
  ## The namespace for the pod-monitor should be the same namespace where your prometheus instance is running
  namespace: ""

# The values below are used for Traefik Helm chart. For more information, see
# https://github.com/traefik/traefik-helm-chart
traefik:
  enabled: true
  fullnameOverride: traefik
  image:
    name: cognigy.azurecr.io/traefik
    tag: "2.6.3"
    pullPolicy: IfNotPresent
  deployment: 
    ## Specify imagePullSecrets to pull the image from private repository.
    ## Based on the information provided in "imageCredentials" parameter previously, this should be
    ## either "cognigy-registry-token" or predefined secrets.
    ## NOTE: Can be ignored if traefik is not enabled.
    imagePullSecrets:
      - name: cognigy-registry-token
    replicas: 3
  logs:
    general:
      level: INFO
    access:
      enabled: true
      filters: {}
      fields:
        general:
          defaultmode: keep
          names: {}
        headers:
          defaultmode: drop
          names: {}
  ingressClass:
    enabled: true
    isDefaultClass: true
    fallbackApiVersion: ""
  globalArguments: []
  additionalArguments:
    - "--api.insecure=true"
    - "--entryPoints.web.forwardedHeaders.insecure"
    - "--entryPoints.websecure.forwardedHeaders.insecure"
    - "--entryPoints.web.proxyProtocol.insecure"
    - "--entryPoints.websecure.proxyProtocol.insecure"
  ports:
    traefik:
      port: 9000
      expose: true
      exposedPort: 9000
      protocol: TCP
    web:
      port: 8000
      expose: true
      exposedPort: 80
      protocol: TCP
      ## NOTE: If traefik is enabled ("traefik.enabled: true"), and you provide "tls.enable: false", then the auto redirection of http to https
      ## also must be disabled by setting traefik.ports.web.redirectTo: null
      redirectTo: websecure
    websecure:
      port: 8443
      expose: true
      exposedPort: 443
      protocol: TCP
      tls:
        enabled: true
        options: ""
        certResolver: ""
        domains: []
    metrics:
      port: 9100
      expose: true
      exposedPort: 9100
      protocol: TCP
  service:
    enabled: true
    type: LoadBalancer
    annotations: {}
    annotationsTCP: {}
    annotationsUDP: {}
    labels: {}
    spec: {}
    loadBalancerSourceRanges: []
    externalIPs: []
  tlsOptions:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
## For the securityContext config of traefik, please refer to the official values.yaml file of the traefik
## This is the link for chart v10.19.4 for example
## https://github.com/traefik/traefik-helm-chart/blob/f24ac3c53579e0889b53a29f23a76d359ad54803/traefik/values.yaml#L490-L501
