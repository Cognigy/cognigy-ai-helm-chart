# If cognigy provided mongodb helm chart(https://github.com/Cognigy/cognigy-mongodb-helm-chart) is not in use then set "mongodb.enabled" to false. It will skip doing all corresponding task related to mongodb helm chart, such as creating necessary database. By default it is always enabled.
# mongodb:
#   enabled: false

# This MongoDB user and password should have the permission to create users and databases, so normally it is admin or root
# It does NOT have to be root user. We use these key names to be compatible with Bitnami MongoDB Helm Chert
mongodb:
  enabled: true 
  auth:
    rootUser: root
    rootPassword: ""
  # Default value for the MongoDB replica set deployed by Cognigy MongoDB Helm Chart into 3 availability zones:
  # hosts: mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-1.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-2.mongodb-headless.mongodb.svc.cluster.local:27017
  # for development and testing purposes with a single replica MongoDB installation in "mongodb" namespace use:
  # hosts: "mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017"
  hosts: mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-1.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-2.mongodb-headless.mongodb.svc.cluster.local:27017

## Credentials for pulling image from private image registry.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
## NOTE 1: Either clear text credentials (registry, username and password) or pullSecrets must be provided.
## NOTE 2: If traefik is enabled and you provide clear text credentials, then traefik.deployment.imagePullSecrets must
## be set to "cognigy-registry-token". If you set custom pullSecrets value instead, set the same value under traefik.deployment.imagePullSecrets
imageCredentials:
  ## Alternatively specify the username, password and the url of the private registry.
  ## A kubernetes.io/dockerconfigjson type secret named "cognigy-registry-token" will be created based on these information.
  registry: "cognigy.azurecr.io"
  username: ""
  password: ""

  ## Alternatively specify an array of imagePullSecrets.
  ## Secrets must be manually created in the proper namespace beforehand.
  ## Example:
  ## pullSecrets:
  ##   - cognigyRegistrySecretName
  ##
  ## NOTE: When registry, username and password all are set, the pullSecrets are ignored.
  pullSecrets: []

# Cognigy supports 3 cloud providers:
# - aws
# - azure
# - generic for on-premises installation e.g. with OpenShift
cloud:
  provider: aws
  region: ""

# For AWS cloud provider only:
efs:
  flowModules:
    id: ""
  functions:
    id: ""

cognigyLiveAgent:
  platformToken: ""

# Install Management UI on the cluster.
# It is not required, since if not installed and the API endpoint is accessible from the Internet, you can still use the provided Management UI at https://management-ui-v4.cognigy.ai/
managementUi:
  enabled: false
  ingress:
    enabled: true
    host: ""
  image: cognigy.azurecr.io/management-ui:49120040ac4bd68a2a03175bbe2a5cd334285339
  replicaCount: 1
  resources:
    limits:
      memory: "30Mi"
      cpu: "20m"
    requests:
      memory: "10Mi"
      cpu: "10m"

# managementUiCredentials: '[{"username": "example_username", "password": "example_password"}]'
managementUiCredentials: '[]'


## SMTP server information for 'forgot password' functionality.
## Password for the SMTP server.
## A secret named "cognigy-smtp" will be created based on the information provided.
smtpPassword: ""
## The name of an existing secret with SMTP server credentials. The secret must have a
## "system-smtp-password" key from where the password will be extracted.
## NOTE: When this is set, "smtpPassword" is ignored.
smtpPasswordExistingSecret: ""


tls:
  # Careful with the indentation
  # For more information, see https://helm.sh/docs/chart_template_guide/yaml_techniques/#strings-in-yaml
  crt: |
    -----BEGIN CERTIFICATE-----
    -----END CERTIFICATE-----
  key: |
    -----BEGIN PRIVATE KEY-----
    -----END PRIVATE KEY-----

# If ingress is not required to deploy then you can set "ingress.enabled" to false. By default it is always enabled.
# ingress:
#   enabled: false

ingress:
  enabled: true
  serviceAnalyticsOdata:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceApi:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceEndpoint:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceInsightsApi:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceUi:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  serviceWebchat:
    host: ""
    ipWhiteListMiddleware:
      enabled: true
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0

## Kubernetes service type
##
service:
  serviceAnalyticsOdata:
    ## Optional Service annotations.
    ## Example:
    ## annotations:
    ##   service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    ##   service.name: service-analytics-odata
    ##
    annotations: {}
  serviceApi:
    annotations: {}
  serviceEndpoint:
    annotations: {}
  serviceInsightsApi:
    annotations: {}
  serviceInsightsUi:
    annotations: {}
  serviceUi:
    annotations: {}
  serviceWebchat:
    annotations: {}
  statefulRabbitMq:
    annotations: {}
  statefulRedis:
    annotations: {}
  statefulRedisPersistent:
    annotations: {}

cognigyEnv:
  NODE_ENV: production

  # Enable the creation of metrics which will then get consumed
  # by our 'service-monitoring'.
  MONITOR_RPC_CALLS: "true"

  # Redis configuration, will soon be a connection string
  REDIS_HOST: redis
  REDIS_PORT: "6379"

  # Redis (persistent) configuration, will soon be a connection string
  REDIS_PERSISTENT_PORT: "6379"
  REDIS_PERSISTENT_HOST: redis-persistent

  # limits (api requests, db queries, context-size)
  MESSAGE_TTL_SECONDS: "120"
  MAX_MEMORY_OBJECT_SIZE: "65536"
  HTTP_JSON_BODY_LIMIT: "65536"
  MAX_BYTE_SIZE: "524288"
  RESPONSE_BYTES_LIMIT: "524288"

  # features (enable / disable)
  FEATURE_CUSTOM_NODES: "true"

  # log cleanup
  LOG_ENTRIES_TTL_IN_MINUTES: "1440"
  LOG_ENTRIES_BUFFER_IN_SECONDS: "5"

  # SMTP server for 'forgot password' functionality
  SYSTEM_SMTP_HOST: "test"
  SYSTEM_SMTP_PORT: "test"
  SYSTEM_SMTP_USERNAME: "test"
  SYSTEM_SMTP_FROM: "test"
  SYSTEM_SMTP_CONNECTION_TYPE: "starttls"
  # SYSTEM_SMTP_PASSWORD is a secret!

  # Domains to whitelist for cors for the API (service-api)
  API_CORS_WHITELIST: ""

  # Execution relevant configuration (service-execution)
  MODULE_MAX_EVENT_EMISSIONS: "10"
  MAX_MODULE_EXECUTION_TIME_IN_SECONDS: "20"

  # Endpoint configuration for Alexa
  ALEXA_END_SESSION_AFTER_EACH_REPLY: "true"

  # Enable max contact profile TTL in minutes
  MAX_CONTACT_PROFILE_TTL_IN_MINUTES: "43200"

  # Enable max conversation TTL in minutes
  MAX_CONVERSATION_TTL_IN_MINUTES: "43200"

  # Enable max conversation TTL in minutes
  MAX_SESSION_STATE_TTL_IN_MINUTES: "10080"

  # Enable new Cognigy Insights UI
  FEATURE_USE_SERVICE_INSIGHTS_UI: "true"

amazonCredentials:
  clientId: ""
  clientSecret: ""

# Stateful Backend Components
statefulRabbitMq:
  image: cognigy.azurecr.io/rabbitmq:3.9.20_cognigy-4.X
  replicaCount: 1
  resources:
    limits:
      memory: 2Gi
      cpu: "2"
    requests:
      memory: 1Gi
      cpu: "1"
  securityContext: {}

# If redis is not required to deploy then you can set the "statefulRedis.enabled" flag to false. By default it is always enabled. 
# statefulRedis:
#   enabled: false

statefulRedis:
  enabled: true
  image: cognigy.azurecr.io/redis:5.0.14_cognigy_4.X
  replicaCount: 1
  resources:
    limits:
      memory: 512Mi
      cpu: "0.5"
    requests:
      memory: 100Mi
      cpu: "0.2"
  securityContext: {}

# If redis-persistent is not required to deploy then you can set the "statefulRedis.enabled" flag to false. By default it is always enabled.
# statefulRedisPersistent: 
#   enabled: false

statefulRedisPersistent:
  enabled: true
  image: cognigy.azurecr.io/redis:5.0.14_cognigy_4.X
  replicaCount: 1
  resources:
    limits:
      memory: 512Mi
      cpu: "0.5"
    requests:
      memory: 100Mi
      cpu: "0.2"
  securityContext: {}

# Cognigy.AI components images
serviceAi:
  image: cognigy.azurecr.io/service-ai:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.4'
      memory: 400M
    limits:
      cpu: '0.4'
      memory: 500M
  ## Optionally specify list of additional volumes
  ## Examples:
  ## extraVolumes:
  ##   - name: foo
  ##     secret:
  ##       secretName: mysecret
  ##       optional: false
  ##   - name: config-volume
  ##     configMap:
  ##       name: special-config
  ##       items:
  ##       - key: SPECIAL_LEVEL
  ##         path: keys
  extraVolumes: []
  ## Optionally specify list of additional volumeMounts
  ## Examples:
  ## extraVolumeMounts:
  ##   - name: foo
  ##     mountPath: "/etc/foo"
  ##     readOnly: true
  ##   - name: config-volume
  ##     mountPath: /etc/config
  extraVolumeMounts: []
  securityContext: {}
serviceAlexaManagement:
  image: cognigy.azurecr.io/service-alexa-management:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceAnalyticsCollector:
  image: cognigy.azurecr.io/service-analytics-collector:release-bd8e9d8-1659099054
  replicaCount: 3
  resources:
    requests:
      cpu: '0.300'
      memory: 160M
    limits:
      cpu: '0.300'
      memory: 200M
  securityContext: {}
serviceAnalyticsConversations:
  image: cognigy.azurecr.io/service-analytics-conversations:release-a094611-1659099053
  replicaCount: 3
  requests:
    cpu: '0.1'
    memory: 120M
  limits:
    cpu: '0.3'
    memory: 250M
  securityContext: {}
serviceAnalyticsOdata:
  image: cognigy.azurecr.io/service-analytics-odata:release-96b7f9f-1659099055
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 360M
    limits:
      cpu: '0.5'
      memory: 450M
  securityContext: {}
serviceAnalyticsRealtime:
  image: cognigy.azurecr.io/service-analytics-realtime:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceAnalyticsReporter:
  image: cognigy.azurecr.io/service-analytics-reporter:release-dd3fcaf-1659099058
  replicaCount: 3
  resources:
    requests:
      cpu: '0.5'
      memory: 500M
    limits:
      cpu: '0.5'
      memory: 750M
  securityContext: {}
serviceApi:
  image: cognigy.azurecr.io/service-api:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 280M
    limits:
      cpu: '0.4'
      memory: 350M
  extraVolumes: []
  extraVolumeMounts: []
  securityContext: {}
serviceCustomModules:
  image: cognigy.azurecr.io/service-custom-modules:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.3'
      memory: 512M
    limits:
      cpu: '0.3'
      memory: 512M
  securityContext: {}
serviceEndpoint:
  image: cognigy.azurecr.io/service-endpoint:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 120M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceExecution:
  image: cognigy.azurecr.io/service-execution:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '1'
      memory: 240M
    limits:
      cpu: '1'
      memory: 300M
  securityContext: {}
serviceFunctionExecution:
  image: cognigy.azurecr.io/service-function-execution:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '1'
      memory: 512M
    limits:
      cpu: '2'
      memory: 512M
  securityContext: {}
serviceFunctionScheduler:
  image: cognigy.azurecr.io/service-function-scheduler:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceHandover:
  image: cognigy.azurecr.io/service-handover:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceHttp:
  image: cognigy.azurecr.io/service-http:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.1'
      memory: 75M
  securityContext: {}
serviceInsightsApi:
  image: cognigy.azurecr.io/service-insights-api:release-5a61dd3-1659099055
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.1'
      memory: 75M
  securityContext: {}
serviceInsightsUi:
  image: cognigy.azurecr.io/service-insights-ui:release-2a77f34-1660120772
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceJourneys:
  image: cognigy.azurecr.io/service-journeys:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 100M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceLogs:
  image: cognigy.azurecr.io/service-logs:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 100M
    limits:
      cpu: '0.5'
      memory: 150M
  securityContext: {}
serviceNlpMatcher:
  image: cognigy.azurecr.io/service-nlp-matcher:0227b90a16c8fa7cc4dff440664437bca3f7dfd3
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 300M
    limits:
      cpu: '0.5'
      memory: 500M
  securityContext: {}
serviceNlpNer:
  image: cognigy.azurecr.io/service-nlp-ner:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.3'
      memory: 100M
    limits:
      cpu: '1.0'
      memory: 150M
  securityContext: {}
serviceParser:
  image: cognigy.azurecr.io/service-parser:0227b90a16c8fa7cc4dff440664437bca3f7dfd3
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
servicePlaybookExecution:
  image: cognigy.azurecr.io/service-playbook-execution:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceProfiles:
  image: cognigy.azurecr.io/service-profiles:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceResources:
  image: cognigy.azurecr.io/service-resources:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 512M
    limits:
      cpu: '0.5'
      memory: 512M
  securityContext: {}
serviceSecurity:
  image: cognigy.azurecr.io/service-security:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.2'
      memory: 60M
    limits:
      cpu: '0.4'
      memory: 150M
  securityContext: {}
serviceSessionStateManager:
  image: cognigy.azurecr.io/service-session-state-manager:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.4'
      memory: 400M
    limits:
      cpu: '0.4'
      memory: 500M
  securityContext: {}
serviceTaskManager:
  image: cognigy.azurecr.io/service-task-manager:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceTrainer:
  image: cognigy.azurecr.io/service-trainer:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceUi:
  image: cognigy.azurecr.io/service-ui:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  extraVolumes: []
  extraVolumeMounts: []
  securityContext: {}
serviceWebchat:
  image: cognigy.azurecr.io/service-webchat:a5ebfe6785f1f37b414e8b096455d9b74c5e925d
  replicaCount: 3
  resources:
    requests:
      cpu: '0.1'
      memory: 60M
    limits:
      cpu: '0.3'
      memory: 150M
  securityContext: {}
serviceNlpQaDe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-qa-de:bc8b0e5ebde7bf86dd6c72c6e553774fe855fa8c
  replicaCount: 1
  resources:
    requests:
      cpu: '1'
      memory: 3G
    limits:
      cpu: '1'
      memory: 3G
  securityContext: {}
serviceNlpScoreDe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 800M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}
serviceNlpTrainDe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 800M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}
serviceNlpQaEn:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-qa-en:bc8b0e5ebde7bf86dd6c72c6e553774fe855fa8c
  replicaCount: 1
  resources:
    requests:
      cpu: '1'
      memory: 3G
    limits:
      cpu: '1'
      memory: 3G
  securityContext: {}
serviceNlpScoreEn:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-en:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}
serviceNlpTrainEn:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-en:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}
serviceNlpQaGe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-qa-ge:bc8b0e5ebde7bf86dd6c72c6e553774fe855fa8c
  replicaCount: 1
  resources:
    requests:
      cpu: '1'
      memory: 3G
    limits:
      cpu: '1'
      memory: 3G
  securityContext: {}
serviceNlpScoreGe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ge:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 3000M
    limits:
      cpu: '2'
      memory: 4000M
  securityContext: {}
serviceNlpTrainGe:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ge:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 3000M
    limits:
      cpu: '2'
      memory: 4000M
  securityContext: {}
serviceNlpScoreJa:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ja:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}
serviceNlpTrainJa:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ja:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}
serviceNlpScoreKo:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ko:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}
serviceNlpTrainKo:
  enabled: false
  image: cognigy.azurecr.io/service-nlp-ko:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 960M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}
serviceNlpScoreXx:
  enabled: false
  image: cognigy.azurecr.io/service-nlp:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 800M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}
serviceNlpTrainXx:
  enabled: false
  image: cognigy.azurecr.io/service-nlp:588f7ccfd173b76e974809e180d3ca6370a39c5a
  replicaCount: 2
  resources:
    requests:
      cpu: '0.350'
      memory: 800M
    limits:
      cpu: '1'
      memory: 2500M
  securityContext: {}

## You can enable the pod monitor if any prometheus instance is ruinning on your cluster. 
podMonitors:
  enabled: false
  ## The namespace for the pod-monitor should be the same namespace where your prometheus instance is running
  namespace: ""

# The values below are used for Traefik Helm chart. For more information, see
# https://github.com/traefik/traefik-helm-chart
traefik:
  enabled: true
  fullnameOverride: traefik
  image: 
    name: cognigy.azurecr.io/traefik
    tag: "2.6.3"
    pullPolicy: IfNotPresent
  deployment: 
    imagePullSecrets: 
    ## Specify imagePullSecrets to pull the image from private repository.
    ## Based on the information provided in "imageCredentials" parameter previously, this should be
    ## either "cognigy-registry-token" or predefined secrets.
    ## NOTE: Can be ignored if traefik is not enabled.
      - name: cognigy-registry-token
    replicas: 3
  logs:
    general:
      level: INFO
    access:
      enabled: true
      filters: {}
      fields:
        general:
          defaultmode: keep
          names: {}
        headers:
          defaultmode: drop
          names: {}
  ingressClass:
    enabled: true
    isDefaultClass: true
    fallbackApiVersion: ""
  globalArguments: []
  additionalArguments:
    - "--api.insecure=true"
    - "--entrypoints.web.http.redirections.entrypoint.to=:443"
    - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    - "--entryPoints.web.forwardedHeaders.insecure"
    - "--entryPoints.websecure.forwardedHeaders.insecure"
    - "--entryPoints.web.proxyProtocol.insecure"
    - "--entryPoints.websecure.proxyProtocol.insecure"
  ports:
    traefik:
      port: 9000
      expose: true
      exposedPort: 9000
      protocol: TCP
    web:
      port: 8000
      expose: true
      exposedPort: 80
      protocol: TCP
    websecure:
      port: 8443
      expose: true
      exposedPort: 443
      protocol: TCP
      tls:
        enabled: true
        options: ""
        certResolver: ""
        domains: []
    metrics:
      port: 9100
      expose: true
      exposedPort: 9100
      protocol: TCP
  service:
    enabled: true
    type: LoadBalancer
    annotations: {}
    annotationsTCP: {}
    annotationsUDP: {}
    labels: {}
    spec: {}
    loadBalancerSourceRanges: []
    externalIPs: []
  tlsOptions:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
## For the securityContext config of traefik, please refer to the official values.yaml file of the traefik
## This is the link for chart v10.19.4 for example
## https://github.com/traefik/traefik-helm-chart/blob/f24ac3c53579e0889b53a29f23a76d359ad54803/traefik/values.yaml#L490-L501