# This MongoDB user and password should have the permission to create users and databases, so normally it is admin or root
# It does NOT have to be root user. We use these key names to be compatible with Bitnami MongoDB Helm Chert
mongodb:
  auth:
    rootUser: root
    rootPassword: ""
  # Default value for the MongoDB replica set deployed by Cognigy MongoDB Helm Chart into 3 availability zones:
  # hosts: mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-1.mongodb-headless.mongodb.svc.cluster.local:27017,mongodb-2.mongodb-headless.mongodb.svc.cluster.local:27017
  # for development and testing purposes with a single replica MongoDB installation in "mongodb" namespace use:
  # hosts: "mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017"
  hosts: mongodb-0.mongodb-headless.mongodb.svc.cluster.local:27017
imageCredentials:
  registry: "cognigy.azurecr.io"
  username: ""
  password: ""

# Cognigy supports 3 cloud providers:
# - aws
# - azure
# - generic for on-premises installation e.g. with OpenShift
cloud:
  provider: local
  region: ""

## For AWS cloud provider only:
## Cognigy Flow Modules
##
flowModules:
  persistence:
    ## For AWS cloud provider only
    ##
    aws:
      efs:
        id: ""

## For AWS cloud provider only:
## Cognigy Functions
##
functions:
  persistence:
    ## For AWS cloud provider only
    ##
    aws:
      efs:
        id: ""

cognigyLiveAgent:
  platformToken: ""

# Install Management UI on the cluster.
# It is not required, since if not installed and the API endpoint is accessible from the Internet, you can still use the provided Management UI at https://management-ui-v4.cognigy.ai/
managementUi:
  enabled: true
  ingress:
    enabled: true
    host: "management-ui.test"

# managementUiCredentials: '[{"username": "example_username", "password": "example_password"}]'
managementUiCredentials: "[]"

smtpPassword: ""

tls:
  # Careful with the indentation
  # For more information, see https://helm.sh/docs/chart_template_guide/yaml_techniques/#strings-in-yaml
  crt: |
    -----BEGIN CERTIFICATE-----
    -----END CERTIFICATE-----
  key: |
    -----BEGIN PRIVATE KEY-----
    -----END PRIVATE KEY-----

ingress:
  serviceAnalyticsOdata:
    host: "odata.test"
  serviceApi:
    host: "api.test"
  serviceCollector:
    host: "insights-collector.test"
  serviceEndpoint:
    host: "endpoint.test"
  serviceInsightsApi:
    host: "insights-api"
  serviceRuntimeFileManager:
    host: "files-api.test"
  serviceUi:
    host: "ui.test"
  serviceWebchat:
    host: "webchat.test"

### overriding default 3-replica deployments
serviceAi:
  replicaCount: 1
serviceAlexaManagement:
  replicaCount: 1
serviceAnalyticsCollector:
  replicaCount: 1
serviceAnalyticsConversations:
  replicaCount: 1
serviceAnalyticsOdata:
  replicaCount: 1
serviceAnalyticsRealtime:
  replicaCount: 1
serviceAnalyticsReporter:
  replicaCount: 1
serviceApi:
  replicaCount: 1
serviceCustomModules:
  replicaCount: 1
serviceEndpoint:
  replicaCount: 1
serviceExecution:
  replicaCount: 1
serviceFunctionExecution:
  replicaCount: 1
serviceFunctionScheduler:
  replicaCount: 1
serviceHandover:
  replicaCount: 1
serviceHttp:
  replicaCount: 1
serviceJourneys:
  replicaCount: 1
serviceLogs:
  replicaCount: 1
serviceNlpMatcher:
  replicaCount: 1
serviceNlpNer:
  replicaCount: 1
serviceParser:
  replicaCount: 1
servicePlaybookExecution:
  replicaCount: 1
serviceProfiles:
  replicaCount: 1
serviceResources:
  replicaCount: 1
serviceRuntimeFileManager:
  replicaCount: 1
serviceSecurity:
  replicaCount: 1
serviceSessionStateManager:
  replicaCount: 1
serviceTaskManager:
  replicaCount: 1
serviceTrainer:
  replicaCount: 1
serviceUi:
  replicaCount: 1
serviceWebchat:
  replicaCount: 1
### Enable NLP train and scoring services explicitly for the required language
serviceNlpTrainEn:
  enabled: true
  replicaCount: 1
serviceNlpScoreEn:
  enabled: true
  replicaCount: 1

traefik:
  additionalArguments:
    - "--entrypoints.web.http.redirections.entrypoint.to=:443"
    - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    - "--serversTransport.insecureSkipVerify=true"
